{
  "timestamp": "2021-08-11T14:44:05",
  "compiler": {
    "name": "@stencil/core",
    "version": "2.6.0",
    "typescriptVersion": "4.2.3"
  },
  "components": [
    {
      "filePath": "./src/components/es-accordian/es-accordian.tsx",
      "encapsulation": "shadow",
      "tag": "es-accordian",
      "readme": "# es-accordian\n\n\n",
      "docs": "Optionally collapsible sectioned view. Each section can be targeted via a part.",
      "docsTags": [
        {
          "text": "[sectionName] - Slots are created based off of the names of the passed sections.",
          "name": "slot"
        },
        {
          "text": "section_header - Target the header of each section.",
          "name": "part"
        },
        {
          "text": "section_header_title - Target the header text of each section.",
          "name": "part"
        },
        {
          "text": "section_content - Target the content wrapper of each section.",
          "name": "part"
        },
        {
          "text": "section_content_inner - Target the content of each section.",
          "name": "part"
        }
      ],
      "usage": {
        "example": "```tsx\nconst sections = [\n    {\n        name: 'section-1',\n        title: 'Section 1',\n        variant: 'text',\n    },\n    {\n        name: 'section-2',\n        title: 'Collapsable',\n        variant: 'text',\n        collapsable: true,\n    },\n    {\n        name: 'section-3',\n        title: 'Collapsed by default',\n        variant: 'text',\n        collapsable: true,\n        defaultCollapsed: true,\n    },\n    {\n        name: 'section-4',\n        title: 'Works with inputs',\n        variant: 'field',\n        collapsable: true,\n    },\n];\n\nexport default () => (\n    <es-accordian sections={sections}>\n        <p slot={'section-1'}>{'I am in section 1'}</p>\n        <p slot={'section-2'}>{'You can collapse this section'}</p>\n        <p slot={'section-3'}>\n            {'Hello ðŸ‘‹. You can alt-click to collapse or open all sections.'}\n        </p>\n        <es-input slot={'section-4'} value={'hello'} label={'My Field'} />\n    </es-accordian>\n);\n```\n"
      },
      "props": [
        {
          "name": "sections",
          "type": "AccordianSection[]",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "An array of sections to display.",
          "docsTags": [],
          "values": [
            {
              "type": "AccordianSection[]"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "steps",
          "type": "boolean",
          "mutable": false,
          "attr": "steps",
          "reflectToAttr": false,
          "docs": "Display numbered counters beside each title.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "focusin",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "[sectionName]",
          "docs": "Slots are created based off of the names of the passed sections."
        }
      ],
      "parts": [
        {
          "name": "section_content",
          "docs": "Target the content wrapper of each section."
        },
        {
          "name": "section_content_inner",
          "docs": "Target the content of each section."
        },
        {
          "name": "section_header",
          "docs": "Target the header of each section."
        },
        {
          "name": "section_header_title",
          "docs": "Target the header text of each section."
        }
      ],
      "dependents": [],
      "dependencies": [
        "es-counter",
        "es-icon"
      ],
      "dependencyGraph": {
        "es-accordian": [
          "es-counter",
          "es-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/es-badge/es-badge.tsx",
      "encapsulation": "shadow",
      "tag": "es-badge",
      "readme": "# es-badge\n",
      "docs": "Display a counter or dot beside a component to indicate action being required.",
      "docsTags": [],
      "usage": {
        "example": "```tsx\nimport { createStore } from '@eventstore/stores';\n\ninterface CountStore {\n    error: number;\n    warning: number;\n    okay: number;\n}\n\nconst { state } = createStore<CountStore>({\n    error: 1,\n    warning: 0,\n    okay: 1000,\n});\n\nexport default () => (\n    <>\n        {/* counters */}\n\n        <es-badge color={'error'} count={state.error}>\n            <es-button onClick={() => (state.error += 1)}>{'Error'}</es-button>\n        </es-badge>\n\n        <es-badge color={'warning'} count={state.warning}>\n            <es-button onClick={() => (state.warning += 1)}>\n                {'Warning'}\n            </es-button>\n        </es-badge>\n\n        <es-badge color={'okay'} count={state.okay}>\n            <es-button onClick={() => (state.okay += 1)}>{'Okay'}</es-button>\n        </es-badge>\n\n        {/* variants */}\n\n        <es-badge color={'error'} count={state.error} variant={'outline'}>\n            <es-icon icon={'cog'} />\n        </es-badge>\n\n        <es-badge color={'warning'} count={state.warning} showZero>\n            <es-icon icon={'cog'} />\n        </es-badge>\n\n        <es-badge color={'okay'} count={state.okay} variant={'minimal'}>\n            <es-icon icon={'cog'} />\n        </es-badge>\n\n        {/* dot */}\n\n        <es-badge variant={'dot'} color={'error'} count={state.error}>\n            <es-button variant={'outline'} onClick={() => (state.error += 1)}>\n                {'Error'}\n            </es-button>\n        </es-badge>\n\n        <es-badge variant={'dot'} color={'warning'} count={state.warning}>\n            <es-button variant={'outline'} onClick={() => (state.warning += 1)}>\n                {'Warning'}\n            </es-button>\n        </es-badge>\n\n        <es-badge variant={'dot'} color={'okay'} count={state.okay}>\n            <es-button variant={'outline'} onClick={() => (state.okay += 1)}>\n                {'Okay'}\n            </es-button>\n        </es-badge>\n    </>\n);\n```\n\n```css\n:host {\n    display: grid;\n    grid-template-columns: auto auto auto;\n    gap: 40px;\n    align-items: center;\n    justify-items: center;\n    justify-content: center;\n    align-content: center;\n}\n```\n"
      },
      "props": [
        {
          "name": "color",
          "type": "\"error\" | \"okay\" | \"warning\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Choose the color variant of the badge",
          "docsTags": [],
          "default": "'error'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "okay",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "count",
          "type": "number",
          "mutable": false,
          "attr": "count",
          "reflectToAttr": false,
          "docs": "What number to display in the counter (or if the dot should display)",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "showZero",
          "type": "boolean",
          "mutable": false,
          "attr": "show-zero",
          "reflectToAttr": false,
          "docs": "Show the dot and counter even if the count 0 (or negative)",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "number | undefined",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The base size (in px) of the counter (has no effect on the dot)",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"dot\" | \"filled\" | \"minimal\" | \"outline\"",
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "Select the display variant of the badge",
          "docsTags": [],
          "default": "'filled'",
          "values": [
            {
              "value": "dot",
              "type": "string"
            },
            {
              "value": "filled",
              "type": "string"
            },
            {
              "value": "minimal",
              "type": "string"
            },
            {
              "value": "outline",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--badge-background-color",
          "annotation": "prop",
          "docs": "Background color of the badge. Can be set to a default via the color prop."
        },
        {
          "name": "--badge-foreground-color",
          "annotation": "prop",
          "docs": "Foreground (text) color of the badge. Can be set to a default via the color prop."
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "es-counter"
      ],
      "dependencyGraph": {
        "es-badge": [
          "es-counter"
        ]
      }
    },
    {
      "filePath": "./src/components/buttons/es-button/es-button.tsx",
      "encapsulation": "shadow",
      "tag": "es-button",
      "readme": "# es-button\n\n\n",
      "docs": "A button.",
      "docsTags": [
        {
          "text": "before - Placed before the main content with correct padding.",
          "name": "slot"
        },
        {
          "text": "after -  Placed after the main content with correct padding.",
          "name": "slot"
        }
      ],
      "usage": {
        "example": "```tsx\nimport { randomIcon } from 'helpers';\n\nexport default () =>\n    ['filled', 'outline', 'minimal', 'link'].map((variant) =>\n        ['primary', 'secondary', 'white', 'text'].map((color) => (\n            <es-button variant={variant} color={color} onClick={console.log}>\n                <es-icon icon={randomIcon()} slot={'before'} />\n                {`${variant} ${color}`}\n            </es-button>\n        )),\n    );\n```\n\n```css\n:host {\n    display: grid;\n    grid-template-columns: auto auto;\n    gap: 20px;\n    align-items: center;\n    justify-items: center;\n}\n```\n"
      },
      "props": [
        {
          "name": "color",
          "type": "\"primary\" | \"secondary\" | \"text\" | \"white\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "Which color pair the button should use.",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "white",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean | undefined",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "If the button is disabled. Prevents the user from interacting with the button: it cannot be pressed or focused.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "form",
          "type": "string | undefined",
          "mutable": false,
          "attr": "form",
          "reflectToAttr": false,
          "docs": "The form element to associate the button with (it's form owner).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "type",
          "type": "string",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "The default behavior of the button.",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"filled\" | \"link\" | \"minimal\" | \"outline\"",
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": true,
          "docs": "Which styling variant to use.",
          "docsTags": [],
          "default": "'filled'",
          "values": [
            {
              "value": "filled",
              "type": "string"
            },
            {
              "value": "link",
              "type": "string"
            },
            {
              "value": "minimal",
              "type": "string"
            },
            {
              "value": "outline",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "keyup",
          "capture": false,
          "passive": false
        },
        {
          "event": "click",
          "capture": true,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--align-inner",
          "annotation": "prop",
          "docs": "The flex align of the button content."
        },
        {
          "name": "--background-color",
          "annotation": "prop",
          "docs": "Directly control the background color of the button."
        },
        {
          "name": "--border-radius",
          "annotation": "prop",
          "docs": "The border radius of the button."
        },
        {
          "name": "--border-width",
          "annotation": "prop",
          "docs": "The border width of the button."
        },
        {
          "name": "--contrast-color",
          "annotation": "prop",
          "docs": "The background color of the button. (text, border, icon)."
        },
        {
          "name": "--current-color",
          "annotation": "prop",
          "docs": "The foreground color of the button. (text, border, icon)."
        },
        {
          "name": "--spacing",
          "annotation": "prop",
          "docs": "Internal spacing of the button (padding and between slots)."
        },
        {
          "name": "--text-color",
          "annotation": "prop",
          "docs": "Directly control the text color of the button."
        },
        {
          "name": "--text-decoration",
          "annotation": "prop",
          "docs": "The text decoration of the button."
        },
        {
          "name": "--transition-duration",
          "annotation": "prop",
          "docs": "The transition duration of the button."
        }
      ],
      "slots": [
        {
          "name": "after",
          "docs": "Placed after the main content with correct padding."
        },
        {
          "name": "before",
          "docs": "Placed before the main content with correct padding."
        }
      ],
      "parts": [],
      "dependents": [
        "es-table-nested",
        "es-thinking-button"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "es-table-nested": [
          "es-button"
        ],
        "es-thinking-button": [
          "es-button"
        ]
      }
    },
    {
      "filePath": "./src/components/buttons/es-button-link/es-button-link.tsx",
      "encapsulation": "shadow",
      "tag": "es-button-link",
      "readme": "# es-button-link\n\n\n",
      "docs": "Anchor link version of es-button, wraps a `Link` from `@eventstore/router`.",
      "docsTags": [
        {
          "text": "before - Placed before the main content with correct padding.",
          "name": "slot"
        },
        {
          "text": "after -  Placed after the main content with correct padding.",
          "name": "slot"
        }
      ],
      "usage": {
        "example": "```tsx\nimport { randomIcon } from 'helpers';\n\nexport default () =>\n    ['filled', 'outline', 'minimal', 'link'].map((variant) =>\n        ['primary', 'secondary', 'white', 'text'].map((color) => (\n            <es-button-link\n                variant={variant}\n                color={color}\n                forceRefresh\n                target={'_blank'}\n                url={'https://www.youtube.com/watch?v=dQw4w9WgXcQ'}\n            >\n                {`${variant} ${color}`}\n                <es-icon icon={randomIcon()} slot={'after'} />\n            </es-button-link>\n        )),\n    );\n```\n\n```css\n:host {\n    display: grid;\n    grid-template-columns: auto auto;\n    gap: 20px;\n    align-items: center;\n    justify-items: center;\n}\n```\n"
      },
      "props": [
        {
          "name": "anchorClass",
          "type": "string | undefined",
          "mutable": false,
          "attr": "anchor-class",
          "reflectToAttr": false,
          "docs": "Class for the contained anchor element",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "anchorId",
          "type": "string | undefined",
          "mutable": false,
          "attr": "anchor-id",
          "reflectToAttr": false,
          "docs": "Id for the contained anchor element",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "anchorRole",
          "type": "string | undefined",
          "mutable": false,
          "attr": "anchor-role",
          "reflectToAttr": false,
          "docs": "Role for the contained anchor element",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "anchorTabIndex",
          "type": "string | undefined",
          "mutable": false,
          "attr": "anchor-tab-index",
          "reflectToAttr": false,
          "docs": "Tab Index for the contained anchor element",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "anchorTitle",
          "type": "string | undefined",
          "mutable": false,
          "attr": "anchor-title",
          "reflectToAttr": false,
          "docs": "Title for the contained anchor element",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "ariaHaspopup",
          "type": "string | undefined",
          "mutable": false,
          "attr": "aria-haspopup",
          "reflectToAttr": false,
          "docs": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "ariaLabel",
          "type": "string | undefined",
          "mutable": false,
          "attr": "aria-label",
          "reflectToAttr": false,
          "docs": "Fefines a string value that labels the current element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "ariaPosinset",
          "type": "string | undefined",
          "mutable": false,
          "attr": "aria-posinset",
          "reflectToAttr": false,
          "docs": "Defines an element's number or position in the current set of listitems or treeitems.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "ariaSetsize",
          "type": "number | undefined",
          "mutable": false,
          "attr": "aria-setsize",
          "reflectToAttr": false,
          "docs": "Defines the number of items in the current set of listitems or treeitems.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "color",
          "type": "\"primary\" | \"secondary\" | \"text\" | \"white\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "Which color pair the button should use.",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "white",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean | undefined",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "If the link is disabled. Prevents the user from interacting with the link: it cannot be pressed or focused.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "forceRefresh",
          "type": "boolean | undefined",
          "mutable": false,
          "attr": "force-refresh",
          "reflectToAttr": false,
          "docs": "If the button should navigate within the router context, or force a refresh.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "target",
          "type": "string | undefined",
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "Target for link (eg: target=\"_blank\")",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "url",
          "type": "string | undefined",
          "mutable": false,
          "attr": "url",
          "reflectToAttr": false,
          "docs": "Where the button should link to.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"filled\" | \"link\" | \"minimal\" | \"outline\"",
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": true,
          "docs": "Which styling variant to use",
          "docsTags": [],
          "default": "'filled'",
          "values": [
            {
              "value": "filled",
              "type": "string"
            },
            {
              "value": "link",
              "type": "string"
            },
            {
              "value": "minimal",
              "type": "string"
            },
            {
              "value": "outline",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--align-inner",
          "annotation": "prop",
          "docs": "The flex align of the button content."
        },
        {
          "name": "--background-color",
          "annotation": "prop",
          "docs": "Directly control the background color of the button."
        },
        {
          "name": "--border-radius",
          "annotation": "prop",
          "docs": "The border radius of the button."
        },
        {
          "name": "--border-width",
          "annotation": "prop",
          "docs": "The border width of the button."
        },
        {
          "name": "--contrast-color",
          "annotation": "prop",
          "docs": "The background color of the button. (text, border, icon)."
        },
        {
          "name": "--current-color",
          "annotation": "prop",
          "docs": "The foreground color of the button. (text, border, icon)."
        },
        {
          "name": "--spacing",
          "annotation": "prop",
          "docs": "Internal spacing of the button (padding and between slots)."
        },
        {
          "name": "--text-color",
          "annotation": "prop",
          "docs": "Directly control the text color of the button."
        },
        {
          "name": "--text-decoration",
          "annotation": "prop",
          "docs": "The text decoration of the button."
        },
        {
          "name": "--transition-duration",
          "annotation": "prop",
          "docs": "The transition duration of the button."
        }
      ],
      "slots": [
        {
          "name": "after",
          "docs": "Placed after the main content with correct padding."
        },
        {
          "name": "before",
          "docs": "Placed before the main content with correct padding."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/es-callout/es-callout.tsx",
      "encapsulation": "shadow",
      "tag": "es-callout",
      "readme": "# es-callout\n\n\n",
      "docs": "Calls out a piece of information.",
      "docsTags": [
        {
          "text": "heading - Targets the heading text.",
          "name": "part"
        },
        {
          "text": "icon - Targets the icon.",
          "name": "part"
        }
      ],
      "usage": {
        "example": "```tsx\nimport { randomIcon } from 'helpers';\n\nexport default () => (\n    <>\n        <es-callout variant={'tip'} heading={'Just the tip.'}>\n            {'And only for a minute mind.'}\n        </es-callout>\n        <es-callout variant={'warning'} heading={'Beware.'}>\n            {'There is danger ahead.'}\n        </es-callout>\n        <es-callout variant={'error'} heading={'We have an error here.'}>\n            {'Something has gone horribly wrong.'}\n        </es-callout>\n        <es-callout\n            class={'custom'}\n            icon={randomIcon()}\n            heading={'I am custom.'}\n        >\n            {'Check the css tab to see the customisations'}\n        </es-callout>\n    </>\n);\n```\n\n```css\n.custom {\n    --strong-color: yellow;\n    --weak-color: #35363a;\n    color: #dadce0;\n    border-left-width: 5px;\n}\n\n.custom::part(heading) {\n    font-style: italic;\n}\n\n.custom::part(icon) {\n    border-radius: 0;\n    border-width: 5px;\n}\n```\n"
      },
      "props": [
        {
          "name": "heading",
          "type": "string",
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": false,
          "docs": "Heading text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "icon",
          "type": "string | undefined",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Override the variant icon.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"error\" | \"tip\" | \"warning\"",
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": true,
          "docs": "Which color set to use.",
          "docsTags": [],
          "default": "'tip'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "tip",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--strong-color",
          "annotation": "prop",
          "docs": "Header, icon and border color. Can be set to a default via the variant prop."
        },
        {
          "name": "--weak-color",
          "annotation": "prop",
          "docs": "Background color. Can be set to a default via the variant prop."
        }
      ],
      "slots": [],
      "parts": [
        {
          "name": "heading",
          "docs": "Targets the heading text."
        },
        {
          "name": "icon",
          "docs": "Targets the icon."
        }
      ],
      "dependents": [],
      "dependencies": [
        "es-icon"
      ],
      "dependencyGraph": {
        "es-callout": [
          "es-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/es-copy/es-copy.tsx",
      "encapsulation": "shadow",
      "tag": "es-copy",
      "readme": "# es-copy\n\n\n",
      "docs": "Copies the text passed as a child when clicked.",
      "docsTags": [],
      "usage": {
        "example": "```tsx\nexport default () => (\n    <es-copy>{'Click to copy this text to your clipboard.'}</es-copy>\n);\n```\n\n```css\n:host {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n```\n"
      },
      "props": [],
      "methods": [
        {
          "name": "copy",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "copy() => Promise<void>",
          "parameters": [],
          "docs": "Manually triggers the copy of the inner text.",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "click",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "es-icon"
      ],
      "dependencyGraph": {
        "es-copy": [
          "es-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/es-counter/es-counter.tsx",
      "encapsulation": "shadow",
      "tag": "es-counter",
      "readme": "# es-counter\n\n\n",
      "docs": "A pill display of an number, that pulses on change. Caps out at 999.",
      "docsTags": [],
      "usage": {
        "example": "```tsx\nimport { createStore } from '@eventstore/stores';\nimport { random } from 'helpers';\n\nconst { state } = createStore(Array.from({ length: 144 }, () => random(800)));\n\nsetInterval(() => {\n    const key = random(144);\n    state[key] += 1;\n}, 10);\n\nconst variant = ['filled', 'outline', 'minimal'];\nconst variants = Array.from({ length: 144 }, (_, i) => variant[random(3)]);\n\nexport default () =>\n    variants.map((v, i) => <es-counter key={i} count={state[i]} variant={v} />);\n```\n\n```css\n:host {\n    display: grid;\n    grid-template-columns: repeat(12, minmax(12px, 1fr));\n    gap: 10px;\n    align-items: center;\n    justify-items: center;\n    justify-content: center;\n    align-content: center;\n    --background-color: white;\n}\n```\n"
      },
      "props": [
        {
          "name": "count",
          "type": "number",
          "mutable": false,
          "attr": "count",
          "reflectToAttr": false,
          "docs": "The number to display",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "number",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The height of the counter that the rest of the dimensions scale from",
          "docsTags": [],
          "default": "24",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"filled\" | \"minimal\" | \"outline\"",
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": true,
          "docs": "The display style of the counter.",
          "docsTags": [],
          "default": "'filled'",
          "values": [
            {
              "value": "filled",
              "type": "string"
            },
            {
              "value": "minimal",
              "type": "string"
            },
            {
              "value": "outline",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--background-color",
          "annotation": "prop",
          "docs": "Defaults to --color-secondary. The forground color. Named to imherit colors from es-button."
        },
        {
          "name": "--text-color",
          "annotation": "prop",
          "docs": "Defaults to currentColor. The background color. Named to imherit colors from es-button."
        },
        {
          "name": "--transition-duration",
          "annotation": "prop",
          "docs": "Duration of the pulse. Defaults to 300ms."
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [
        "es-accordian",
        "es-badge",
        "es-toast"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "es-accordian": [
          "es-counter"
        ],
        "es-badge": [
          "es-counter"
        ],
        "es-toast": [
          "es-counter"
        ]
      }
    },
    {
      "filePath": "./src/components/es-icon/es-icon.tsx",
      "encapsulation": "shadow",
      "tag": "es-icon",
      "readme": "# es-icon\n\n\n",
      "docs": "Displays an icon loaded from the `iconStore`. An icon named \"spinner\" will automatically spin.\nSee [IconStore](/components/variables/iconStore) for details on how to load icons.",
      "docsTags": [],
      "usage": {
        "example": "```tsx\nimport { icons } from 'helpers';\n\nexport default () =>\n    icons.map((icon) => <es-icon key={icon} icon={icon} title={icon} />);\n```\n\n```css\n:host {\n    display: grid;\n    grid-template-columns: repeat(12, minmax(12px, 1fr));\n    gap: 10px;\n    align-items: center;\n    justify-items: center;\n    justify-content: center;\n    align-content: center;\n}\n```\n"
      },
      "props": [
        {
          "name": "angle",
          "type": "number",
          "mutable": false,
          "attr": "angle",
          "reflectToAttr": false,
          "docs": "Rotate the icon to a speciied angle.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Which icon to display.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "size",
          "type": "number",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The hight and width to scale the icon to.",
          "docsTags": [],
          "default": "24",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "spin",
          "type": "boolean | undefined",
          "mutable": false,
          "attr": "spin",
          "reflectToAttr": false,
          "docs": "Apply a spin animation.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "spinDirection",
          "type": "\"antiClockwise\" | \"clockwise\"",
          "mutable": false,
          "attr": "spin-direction",
          "reflectToAttr": false,
          "docs": "When spinning, should it spin clockwise or anticlockwise.",
          "docsTags": [],
          "default": "'clockwise'",
          "values": [
            {
              "value": "antiClockwise",
              "type": "string"
            },
            {
              "value": "clockwise",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "spinEnd",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "spinEnd() => Promise<void>",
          "parameters": [],
          "docs": "Provides a promise that resolves at the end of a single spin, if the icon is spinning.",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "es-accordian",
        "es-callout",
        "es-copy",
        "es-modal",
        "es-status",
        "es-table-nested",
        "es-thinking-button",
        "es-toast"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "es-accordian": [
          "es-icon"
        ],
        "es-callout": [
          "es-icon"
        ],
        "es-copy": [
          "es-icon"
        ],
        "es-modal": [
          "es-icon"
        ],
        "es-status": [
          "es-icon"
        ],
        "es-table-nested": [
          "es-icon"
        ],
        "es-thinking-button": [
          "es-icon"
        ],
        "es-toast": [
          "es-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/es-modal/es-modal.tsx",
      "encapsulation": "shadow",
      "tag": "es-modal",
      "readme": "# es-modal\n",
      "docs": "A pop up modal for overlaying information, warnings and confirmations.\nTraps focus within the modal, and returns focus to previous location when closed.\nPair with an [`es-portal`](/components/es-portal) to open and close.",
      "docsTags": [
        {
          "text": "header - Places components in the header. Pass a h2 then a h1 for standard styling.",
          "name": "part"
        },
        {
          "text": "footer - Places components in the footer. Pass es-button and es-button-link.",
          "name": "part"
        }
      ],
      "usage": {
        "example": "```tsx\nconst token = 'abc-123-cde';\n\nexport default () => (\n    <es-modal role={'alert'}>\n        <h2 slot={'header'}>{'Successfully created a new'}</h2>\n        <h1 slot={'header'}>{'Refresh token'}</h1>\n        <es-input\n            readonly\n            class={'token'}\n            name={'token'}\n            placeholder={''}\n            label={''}\n            value={token}\n            inputProps={{\n                onFocus(e) {\n                    e.target.select();\n                },\n            }}\n        >\n            <es-thinking-button\n                defaultIcon={'copy'}\n                text={'Copy'}\n                action={(e) => {\n                    e.preventDefault();\n                    navigator.clipboard.writeText(token);\n                }}\n                variant={'outline'}\n                color={'secondary'}\n            />\n        </es-input>\n        <b class={'copy_warning'}>\n            <es-icon icon={'critical'} />\n            {\"Be sure to copy your new token. It won't be shown again.\"}\n        </b>\n        <es-button variant={'filled'} color={'secondary'} slot={'footer'}>\n            {'Done'}\n        </es-button>\n    </es-modal>\n);\n```\n\n```css\n.token {\n    width: 100%;\n    --field-grid-columns: [input] 1fr [before] 15px [after] 110px;\n    --field-grid-gap: 0;\n}\n\n.copy_warning {\n    display: flex;\n    align-items: center;\n}\n\n.copy_warning es-icon {\n    margin-right: 15px;\n}\n\n.done_button {\n    min-width: 100px;\n}\n```\n"
      },
      "props": [
        {
          "name": "footer",
          "type": "boolean",
          "mutable": false,
          "attr": "footer",
          "reflectToAttr": false,
          "docs": "If the modal should have a footer.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "header",
          "type": "boolean",
          "mutable": false,
          "attr": "header",
          "reflectToAttr": false,
          "docs": "If the modal should have a header.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "requestClose",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggers when the modal requests to be closed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keyup",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [
        {
          "name": "footer",
          "docs": "Places components in the footer. Pass es-button and es-button-link."
        },
        {
          "name": "header",
          "docs": "Places components in the header. Pass a h2 then a h1 for standard styling."
        }
      ],
      "dependents": [],
      "dependencies": [
        "es-icon"
      ],
      "dependencyGraph": {
        "es-modal": [
          "es-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/es-popover/es-popover.tsx",
      "encapsulation": "shadow",
      "tag": "es-popover",
      "readme": "# es-popper-inner\n\n\n",
      "docs": "Attaches a portaled popover, attached to the parent node. Can be used to create dropdowns, tooltips etc. The parent scoped shadow styles are copied to the created portals shadow styles, to allow styling popover contents externally.",
      "docsTags": [],
      "usage": {
        "example": "```tsx\nimport { createStore } from '@eventstore/stores';\nimport { debounce } from '@eventstore/utils';\n\ninterface PopoverStore {\n    open: boolean;\n    constrain: HTMLESPopoverElement['constrain'];\n    positionY: HTMLESPopoverElement['positionY'];\n    positionX: HTMLESPopoverElement['positionX'];\n    attachmentY: HTMLESPopoverElement['attachmentY'];\n    attachmentX: HTMLESPopoverElement['attachmentX'];\n    offsetY: number;\n    offsetX: number;\n}\n\nconst { state } = createStore<PopoverStore>({\n    open: true,\n    constrain: 'none',\n    positionY: 'top',\n    positionX: 'right',\n    attachmentY: 'bottom',\n    attachmentX: 'left',\n    offsetY: 0,\n    offsetX: 0,\n});\n\nexport default () => (\n    <>\n        <div class={'options'}>\n            <es-checkbox\n                name={'open'}\n                value={state.open}\n                onFieldchange={fieldChange}\n            >\n                {'Open'}\n            </es-checkbox>\n            <es-select\n                name={'constrain'}\n                label={'constrain'}\n                options={constrainOptions}\n                value={state.constrain}\n                onFieldchange={fieldChange}\n            />\n            <es-select\n                name={'positionY'}\n                label={'positionY'}\n                options={yLocations}\n                value={state.positionY}\n                onFieldchange={fieldChange}\n            />\n            <es-select\n                name={'positionX'}\n                label={'positionX'}\n                options={xLocations}\n                value={state.positionX}\n                onFieldchange={fieldChange}\n            />\n            <es-select\n                name={'attachmentY'}\n                label={'attachmentY'}\n                options={yLocations}\n                value={state.attachmentY}\n                onFieldchange={fieldChange}\n            />\n            <es-select\n                name={'attachmentX'}\n                label={'attachmentX'}\n                options={xLocations}\n                value={state.attachmentX}\n                onFieldchange={fieldChange}\n            />\n            <es-number-input\n                label={'offsetY'}\n                unit={'px'}\n                name={'offsetY'}\n                value={state.offsetY}\n                onFieldchange={fieldChange}\n            />\n            <es-number-input\n                label={'offsetX'}\n                unit={'px'}\n                name={'offsetX'}\n                value={state.offsetX}\n                onFieldchange={fieldChange}\n            />\n        </div>\n        <div class={'wrapper'}>\n            <div class={'attachment'}>\n                {'Attachment element'}\n                <es-popover\n                    open={state.open}\n                    constrain={state.constrain}\n                    positionY={state.positionY}\n                    positionX={state.positionX}\n                    attachmentY={state.attachmentY}\n                    attachmentX={state.attachmentX}\n                    offsetY={state.offsetY}\n                    offsetX={state.offsetX}\n                >\n                    <div class={'popper'}>{'popover'}</div>\n                </es-popover>\n            </div>\n        </div>\n    </>\n);\n\nconst fieldChange = (e) => {\n    const { name, value } = e.detail;\n    state[name] = value;\n};\n\nconst constrainOptions = [\n    { value: 'none', name: 'none' },\n    { value: 'width', name: 'width' },\n    { value: 'height', name: 'height' },\n    { value: 'both', name: 'both' },\n];\n\nconst yLocations = [\n    { value: 'top', name: 'top' },\n    { value: 'middle', name: 'middle' },\n    { value: 'bottom', name: 'bottom' },\n];\n\nconst xLocations = [\n    { value: 'right', name: 'right' },\n    { value: 'middle', name: 'middle' },\n    { value: 'left', name: 'left' },\n];\n```\n\n```css\n:host {\n    display: flex;\n    align-items: flex-start;\n    width: 100%;\n    padding: 0;\n}\n\n.wrapper {\n    flex: 1 1 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n}\n\n.attachment {\n    background-color: orange;\n    padding: 20px;\n    display: flex;\n    align-items: center;\n}\n\n.inner {\n    width: 100%;\n    height: 100%;\n}\n\n.popper {\n    background-color: skyblue;\n    width: 100%;\n    height: 100%;\n    padding: 5px;\n}\n\n.options {\n    width: 300px;\n    border: 1px solid var(--color-grey-200);\n    padding: 10px;\n    border-radius: 20px;\n    justify-self: flex-end;\n    height: 100vh;\n}\n\nes-select,\nes-number-input {\n    --field-grid-columns: [before] 100px [input] 150px [after] 0px;\n}\n\nes-checkbox {\n    --field-grid-columns: [before] 100px [input] 24px [label] 1fr [after] 0;\n}\n```\n"
      },
      "props": [
        {
          "name": "attachTo",
          "type": "HTMLElement | undefined",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Pass an element to attach the popover to. (Defaults to the parent element.)",
          "docsTags": [],
          "values": [
            {
              "type": "HTMLElement"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "attachmentX",
          "type": "\"left\" | \"middle\" | \"right\"",
          "mutable": false,
          "attr": "attachment-x",
          "reflectToAttr": false,
          "docs": "The Y axis attachment location.",
          "docsTags": [],
          "default": "'middle'",
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "middle",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "attachmentY",
          "type": "\"bottom\" | \"middle\" | \"top\"",
          "mutable": false,
          "attr": "attachment-y",
          "reflectToAttr": false,
          "docs": "The Y axis attachment location.",
          "docsTags": [],
          "default": "'bottom'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "middle",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "backdrop",
          "type": "boolean",
          "mutable": false,
          "attr": "backdrop",
          "reflectToAttr": false,
          "docs": "If the popover should overlay a backdrop, to prevent external clicks.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "constrain",
          "type": "\"both\" | \"height\" | \"none\" | \"width\"",
          "mutable": false,
          "attr": "constrain",
          "reflectToAttr": false,
          "docs": "Constrain the size of the popover to the size of the attachment node.",
          "docsTags": [],
          "default": "'none'",
          "values": [
            {
              "value": "both",
              "type": "string"
            },
            {
              "value": "height",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "width",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "offsetX",
          "type": "number",
          "mutable": false,
          "attr": "offset-x",
          "reflectToAttr": false,
          "docs": "The offset the X axis in pixels.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "offsetY",
          "type": "number",
          "mutable": false,
          "attr": "offset-y",
          "reflectToAttr": false,
          "docs": "The offset the Y axis in pixels.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "mutable": false,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "Toggles if the popover is open or not.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "popperClass",
          "type": "string | undefined",
          "mutable": false,
          "attr": "popper-class",
          "reflectToAttr": false,
          "docs": "Class name for the popper",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "positionX",
          "type": "\"left\" | \"middle\" | \"right\"",
          "mutable": false,
          "attr": "position-x",
          "reflectToAttr": false,
          "docs": "The X axis positioning location.",
          "docsTags": [],
          "default": "'middle'",
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "middle",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "positionY",
          "type": "\"bottom\" | \"middle\" | \"top\"",
          "mutable": false,
          "attr": "position-y",
          "reflectToAttr": false,
          "docs": "The Y axis positioning location.",
          "docsTags": [],
          "default": "'top'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "middle",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "string",
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "A query selecter to select the element to portal the popper to.",
          "docsTags": [],
          "default": "'body'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trapFocus",
          "type": "boolean",
          "mutable": false,
          "attr": "trap-focus",
          "reflectToAttr": false,
          "docs": "If the popover should trap focus within, and return focus on close.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "requestClose",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggers when the popover requests to close.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "es-popper",
        "es-popper-inner"
      ],
      "dependencyGraph": {
        "es-popover": [
          "es-popper",
          "es-popper-inner"
        ]
      }
    },
    {
      "filePath": "./src/components/es-portal/es-portal.tsx",
      "encapsulation": "shadow",
      "tag": "es-portal",
      "readme": "# es-portal\n\n\n",
      "docs": "Portals the passed node to a different part of the document. Note that portal does not transfer shadow scoped styles, unlike `es-popover`, so any portaled elements should be self contained.",
      "docsTags": [],
      "usage": {
        "example": "```tsx\nimport { FunctionalComponent } from '@stencil/core';\nimport { createStore } from '@eventstore/stores';\n\nconst { state } = createStore<{ open: boolean }>({\n    open: true,\n});\n\nexport default () => (\n    <>\n        <es-portal\n            backdrop\n            open={state.open}\n            onRequestClose={requestClose}\n            element={<ExampleModal requestClose={requestClose} />}\n        />\n        <es-button\n            variant={'outline'}\n            onClick={() => {\n                state.open = true;\n            }}\n        >\n            {'Open portal'}\n        </es-button>\n    </>\n);\n\nconst requestClose = () => {\n    state.open = false;\n};\n\nconst ExampleModal: FunctionalComponent = ({ requestClose }) => (\n    <>\n        <style>\n            {`\n                .important {\n                    color: var(--color-error);\n                }\n\n                .cancel {\n                    --current-color: var(--color-grey-200);\n                    --contrast-color: var(--color-white);\n\n                    --text-color: var(--color-text);\n                }\n\n                .delete {\n                    --current-color: var(--color-error);\n                    --contrast-color: var(--color-white);\n                }\n            `}\n        </style>\n        <es-modal role={'alert'}>\n            <h2 slot={'header'}>{'Project name'}</h2>\n            <h1 slot={'header'}>{'Production'}</h1>\n            <p>\n                {\n                    'Deleting this project will delete all associated clusters and networks. This operation cannot be undone.'\n                }\n            </p>\n            <p class={'important'}>\n                {'Are you sure you want to proceed in deleting this project?'}\n            </p>\n            <es-button\n                variant={'outline'}\n                slot={'footer'}\n                class={'cancel'}\n                onClick={requestClose}\n            >\n                {'Cancel'}\n            </es-button>\n            <es-button\n                variant={'outline'}\n                slot={'footer'}\n                class={'delete'}\n                onClick={requestClose}\n            >\n                {'Delete project'}\n            </es-button>\n        </es-modal>\n    </>\n);\n```\n\n```css\n:host {\n    display: flex;\n    align-items: center;\n    justify-contents: center;\n}\n```\n"
      },
      "props": [
        {
          "name": "backdrop",
          "type": "boolean",
          "mutable": false,
          "attr": "backdrop",
          "reflectToAttr": false,
          "docs": "If the portal should overlay a backdrop, to prevent external clicks.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "element",
          "type": "VNode",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The element to render.",
          "docsTags": [],
          "values": [
            {
              "type": "VNode"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "open",
          "type": "boolean",
          "mutable": false,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "If the element is portaled or not.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "string",
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "A query selector to select the location to portal to.",
          "docsTags": [],
          "default": "'body'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "requestClose",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggers when the popover requests to close.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "es-backdrop"
      ],
      "dependencyGraph": {
        "es-portal": [
          "es-backdrop"
        ]
      }
    },
    {
      "filePath": "./src/components/es-progression/es-progression.tsx",
      "encapsulation": "shadow",
      "tag": "es-progression",
      "readme": "# es-progression\n\n\n",
      "docs": "A wizard progression bar.",
      "docsTags": [],
      "usage": {
        "example": "```tsx\nimport { FunctionalComponent } from '@stencil/core';\nimport { createStore } from '@eventstore/stores';\n\nconst { state } = createStore<{ location: string }>({\n    location: '1-1',\n});\n\nexport default () => (\n    <es-progression\n        checkpoints={[\n            {\n                id: '1-1',\n                title: 'Overworld',\n            },\n            {\n                id: '1-2',\n                title: 'Underground',\n            },\n            {\n                id: '1-3',\n                title: 'Athletic',\n            },\n            {\n                id: '1-4',\n                title: 'Castle',\n            },\n        ]}\n        location={state.location}\n        onProgressionRequest={(e) => {\n            state.location = e.detail;\n        }}\n    />\n);\n```\n\n```css\n:host {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n```\n"
      },
      "props": [
        {
          "name": "checkpoints",
          "type": "Checkpoint[]",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "A list of checkpoints to display.",
          "docsTags": [],
          "values": [
            {
              "type": "Checkpoint[]"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "location",
          "type": "string",
          "mutable": false,
          "attr": "location",
          "reflectToAttr": false,
          "docs": "The current active location.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "progressionRequest",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a checkpoint is clicked.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/es-resize-observer/es-resize-observer.tsx",
      "encapsulation": "none",
      "tag": "es-resize-observer",
      "readme": "# es-resize-observer\n\n\n",
      "docs": "Wraps a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver) to allow tracking `DOMRect` dimensions",
      "docsTags": [],
      "usage": {
        "example": "```tsx\nimport { createStore } from '@eventstore/stores';\n\nconst { state } = createStore<{ height: number; width: number }>({\n    height: 0,\n    width: 0,\n});\n\nexport default () => (\n    <es-resize-observer\n        onSizeChanged={(e) => {\n            const { height, width } = e.detail;\n            state.height = height;\n            state.width = width;\n        }}\n    >\n        <span>{`${state.height} x ${state.width}`}</span>\n    </es-resize-observer>\n);\n```\n\n```css\nes-resize-observer {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    height: 100%;\n    border: 2px solid brown;\n    font-size: 48px;\n    color: brown;\n}\n```\n"
      },
      "props": [],
      "methods": [],
      "events": [
        {
          "event": "sizeChanged",
          "detail": "DOMRectReadOnly",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the size of the element changes.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/es-table/es-table.tsx",
      "encapsulation": "none",
      "tag": "es-table",
      "readme": "# es-table\n\n\n",
      "docs": "Create a table from data.",
      "docsTags": [],
      "usage": {
        "example": "```tsx\nimport { iconDetails, IconDetail } from 'helpers';\nimport { TableCells, toast } from '@eventstore/components';\n\nconst tableCells: TableCells<IconDetail> = {\n    name: {\n        title: 'Name',\n    },\n    usage: {\n        title: 'Usage',\n        cell: ({ data: { name } }) => (\n            <pre style={{ margin: 0 }}>{`<es-icon icon={'${name}'} />`}</pre>\n        ),\n    },\n    icon: {\n        title: '',\n        variant: 'no-pad',\n        cell: ({ data: { name } }) => <es-icon icon={name} />,\n    },\n};\n\nconst onClickRow = (e: CustomEvent<IconDetail>) => {\n    const icon = e.detail;\n    toast.success({\n        title: 'Clicked row',\n        message: `You clicked ${icon.name}.`,\n        icon: icon.name,\n    });\n};\n\nexport default () => (\n    <es-table\n        cells={tableCells}\n        rows={Object.values(iconDetails)}\n        onClickRow={onClickRow}\n    />\n);\n```\n\n```css\n:host {\n    padding: 0;\n}\n\n*[role='row'] {\n    cursor: pointer;\n    transition: color 500ms ease;\n}\n\n*[role='row']:hover {\n    color: var(--color-secondary);\n}\n```\n"
      },
      "props": [
        {
          "name": "cells",
          "type": "{ [x: string]: TableCell<any>; }",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "A record of table cell definitions.",
          "docsTags": [],
          "values": [
            {
              "type": "{ [x: string]: TableCell<any>; }"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "columns",
          "type": "string[] | undefined",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The order and keys of the cells to be rendered. If omitted, all cells will be rendered.",
          "docsTags": [],
          "values": [
            {
              "type": "string[]"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "getCellData",
          "type": "<T = any>(key: T) => any",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Sync function for extracting the data from the row. By default, it assumes you passed an array of data as your columns.",
          "docsTags": [],
          "default": "(d) => d",
          "values": [
            {
              "type": "<T = any>(key: T) => any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headless",
          "type": "boolean",
          "mutable": false,
          "attr": "headless",
          "reflectToAttr": false,
          "docs": "Do not render header.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Passed to cell renderer as `parent`.",
          "docsTags": [],
          "default": "'table'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "linkRowTo",
          "type": "((row: any) => string) | undefined",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "A function to calculate a href from the cell data.",
          "docsTags": [],
          "values": [
            {
              "type": "((row: any) => string)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "renderExpansion",
          "type": "(key: any) => VNode | null",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Allows rendering a node after the row.",
          "docsTags": [],
          "default": "() => null",
          "values": [
            {
              "type": "(key: any) => VNode"
            },
            {
              "type": "null"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rowClass",
          "type": "(row: any) => string | Record<string, boolean> | undefined",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "A function to calculate the class or classes of the row from the cellData.",
          "docsTags": [],
          "default": "() => undefined",
          "values": [
            {
              "type": "(row: any) => string"
            },
            {
              "type": "Record<string, boolean>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rowTakesFocus",
          "type": "boolean | undefined",
          "mutable": false,
          "attr": "row-takes-focus",
          "reflectToAttr": false,
          "docs": "If rows should be allowed to take focus",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "rows",
          "type": "any[]",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "An array of rows to render. Each item in the array is passed to getCellData, to allow passing keys or other identifiers.",
          "docsTags": [],
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "clickRow",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered whenever a row is clicked. The `detail` is the item in the row array.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "es-table-nested"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "es-table-nested": [
          "es-table"
        ]
      }
    },
    {
      "filePath": "./src/components/es-table-detail/es-table-detail.tsx",
      "encapsulation": "none",
      "tag": "es-table-detail",
      "readme": "# es-table-detail\n\n\n",
      "docs": "Render a single row data as a grid of information.",
      "docsTags": [],
      "usage": {
        "example": "```tsx\nimport { iconDetails, IconDetail } from 'helpers';\nimport { TableCells, toast } from '@eventstore/components';\n\nconst tableCells: TableCells<IconDetail> = {\n    name: {\n        title: 'Name',\n    },\n    icon: {\n        title: 'Icon',\n        cell: ({ data: { name } }) => <es-icon icon={name} />,\n    },\n    component: {\n        title: 'Internal Name',\n    },\n    aliases: {\n        title: 'Aliases',\n        cell: ({ data: { aliases } }) => aliases?.join(', ') ?? '-',\n    },\n    usage: {\n        title: 'Usage',\n        variant: 'full-width',\n        cell: ({ data: { name } }) => (\n            <pre style={{ margin: 0 }}>{`<es-icon icon={'${name}'} />`}</pre>\n        ),\n    },\n};\n\nexport default () => (\n    <es-table-detail cells={tableCells} data={iconDetails['spinner']} />\n);\n```\n\n```css\n:host {\n    padding: 0;\n}\n```\n"
      },
      "props": [
        {
          "name": "cells",
          "type": "{ [x: string]: TableCell<any>; }",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "A record of table cell definitions.",
          "docsTags": [],
          "values": [
            {
              "type": "{ [x: string]: TableCell<any>; }"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "columns",
          "type": "string[] | undefined",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The order and keys of the cells to be rendered. If omitted, all cells will be rendered.",
          "docsTags": [],
          "values": [
            {
              "type": "string[]"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "data",
          "type": "any",
          "mutable": false,
          "attr": "data",
          "reflectToAttr": false,
          "docs": "The data to render.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "identifier",
          "type": "string",
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Passed to cell renderer as `parent`.",
          "docsTags": [],
          "default": "'detail'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/es-table-detail-header/es-table-detail-header.tsx",
      "encapsulation": "none",
      "tag": "es-table-detail-header",
      "readme": "# es-table-detail-header\n\n\n",
      "docs": "A default header for [`es-table-row`](/components/es-table-detail).",
      "docsTags": [],
      "usage": {
        "example": "```tsx\nimport { iconDetails, IconDetail } from 'helpers';\nimport { TableCells, toast } from '@eventstore/components';\n\nconst tableCells: TableCells<IconDetail> = {\n    name: {\n        title: 'Name',\n    },\n    icon: {\n        title: 'Icon',\n        cell: ({ data: { name } }) => <es-icon icon={name} />,\n    },\n    component: {\n        title: 'Internal Name',\n    },\n    aliases: {\n        title: 'Aliases',\n        variant: 'full-width',\n        cell: ({ data: { aliases } }) =>\n            aliases?.map((alias) => <pre>{alias}</pre>) ?? <pre>{'-'}</pre>,\n    },\n    usage: {\n        title: 'Usage',\n        variant: 'full-width',\n        cell: ({ data: { name } }) => (\n            <pre style={{ margin: 0 }}>{`<es-icon icon={'${name}'} />`}</pre>\n        ),\n    },\n};\n\nconst data = iconDetails['markdown'];\n\nexport default () => (\n    <>\n        <es-table-detail-header\n            cells={tableCells}\n            data={data}\n            titleKey={'component'}\n            actionsCell={'icon'}\n        />\n        <es-table-detail\n            cells={tableCells}\n            data={data}\n            columns={['name', 'aliases', 'usage']}\n        />\n    </>\n);\n```\n\n```css\npre {\n    margin: 0;\n}\n```\n"
      },
      "props": [
        {
          "name": "actionsCell",
          "type": "string",
          "mutable": false,
          "attr": "actions-cell",
          "reflectToAttr": false,
          "docs": "Which cell to place in the top right as a list of actions.",
          "docsTags": [],
          "default": "'actions'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "cells",
          "type": "{ [x: string]: TableCell<any>; }",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "A record of table cell definitions.",
          "docsTags": [],
          "values": [
            {
              "type": "{ [x: string]: TableCell<any>; }"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "data",
          "type": "any",
          "mutable": false,
          "attr": "data",
          "reflectToAttr": false,
          "docs": "The data to render.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "identifier",
          "type": "string",
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Passed to cell renderer as `parent`.",
          "docsTags": [],
          "default": "'detail-header'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "titleKey",
          "type": "string",
          "mutable": false,
          "attr": "title-key",
          "reflectToAttr": false,
          "docs": "The key of the title in the data",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/es-table-nested/es-table-nested.tsx",
      "encapsulation": "none",
      "tag": "es-table-nested",
      "readme": "# es-table-nested\n\n\n",
      "docs": "Create a nested table from data.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "activePath",
          "type": "string[] | undefined",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "A path to a the currently active row, to auto expand its parent and show it as selected.",
          "docsTags": [],
          "values": [
            {
              "type": "string[]"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "canExpand",
          "type": "(key: string, data: any) => boolean",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Function to decide if a row can take expand, to show a nested table.",
          "docsTags": [],
          "default": "() => true",
          "values": [
            {
              "type": "(key: string, data: any) => boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "cells",
          "type": "{ [x: string]: TableCell<any>; }",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "A record of table cell definitions.Some built in cells are cells are available for use:\n- `--borderless`: A blank placeholder cell with no border, for aligning with the parent cell.\n- `--no-pad`: A blank placeholder cell, for aligning with the parent cell.\n- `expander`: The expander button.",
          "docsTags": [],
          "values": [
            {
              "type": "{ [x: string]: TableCell<any>; }"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "columns",
          "type": "string[] | undefined",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The order and keys of the cells to be rendered. If omitted, all cells will be rendered.",
          "docsTags": [],
          "values": [
            {
              "type": "string[]"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "getCellData",
          "type": "(<T = string>(key: T) => any) | undefined",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Sync function for extracting the data from the row. By default, it assumes you passed an array of data as your columns.",
          "docsTags": [],
          "values": [
            {
              "type": "(<T = string>(key: T) => any)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "getNestedCellData",
          "type": "(<T = string>(key: T) => any) | undefined",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Sync function for extracting the data from the nested row. By default, it assumes you passed an array of data as your columns.",
          "docsTags": [],
          "values": [
            {
              "type": "(<T = string>(key: T) => any)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "getNestedRows",
          "type": "((key: string) => any[] | undefined) | undefined",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Sync function for extracting a list of rows for the nested table",
          "docsTags": [],
          "values": [
            {
              "type": "((key: string) => any[]"
            },
            {
              "type": "undefined)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "linkRowTo",
          "type": "((row: any) => string) | undefined",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "A function to calculate a href from the cell data.",
          "docsTags": [],
          "values": [
            {
              "type": "((row: any) => string)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "loadNested",
          "type": "((key: string, data: any) => Promise<void>) | undefined",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "async function for loading nested data when a row is expanded.",
          "docsTags": [],
          "values": [
            {
              "type": "((key: string, data: any) => Promise<void>)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "nestedColumns",
          "type": "string[] | undefined",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The order and keys of the cells to be rendered in a nested table. If omitted, all cells will be rendered.",
          "docsTags": [],
          "values": [
            {
              "type": "string[]"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "nestedIdentifier",
          "type": "string",
          "mutable": false,
          "attr": "nested-identifier",
          "reflectToAttr": false,
          "docs": "Passed to cell renderer as `parent`.",
          "docsTags": [],
          "default": "'nested-table'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "nestedRowTakesFocus",
          "type": "boolean | undefined",
          "mutable": false,
          "attr": "nested-row-takes-focus",
          "reflectToAttr": false,
          "docs": "If the nested rows should be allowed to take focus.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "outerIdentifier",
          "type": "string",
          "mutable": false,
          "attr": "outer-identifier",
          "reflectToAttr": false,
          "docs": "Passed to cell renderer as `parent`.",
          "docsTags": [],
          "default": "'table'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rowClass",
          "type": "(row: any) => string | Record<string, boolean> | undefined",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "A function to calculate the class or classes of the row from the cellData.",
          "docsTags": [],
          "default": "() => undefined",
          "values": [
            {
              "type": "(row: any) => string"
            },
            {
              "type": "Record<string, boolean>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rowTakesFocus",
          "type": "boolean | undefined",
          "mutable": false,
          "attr": "row-takes-focus",
          "reflectToAttr": false,
          "docs": "If rows should be allowed to take focus",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "rows",
          "type": "any[]",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "An array of rows to render. Each item in the array is passed to getCellData, to allow passing keys or other identifiers.",
          "docsTags": [],
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "clickRow",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered whenever a row (or nested row) is clicked. The `detail` is the item in the row array.",
          "docsTags": []
        },
        {
          "event": "expansion",
          "detail": "{ data: any; key: string; }",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered whenever a row is expanded.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "es-table",
        "es-button",
        "es-icon"
      ],
      "dependencyGraph": {
        "es-table-nested": [
          "es-table",
          "es-button",
          "es-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/es-tabs/es-tabs.tsx",
      "encapsulation": "shadow",
      "tag": "es-tabs",
      "readme": "# es-tabs\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "string | undefined",
          "mutable": true,
          "attr": "active",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "activeParam",
          "type": "boolean | string",
          "mutable": false,
          "attr": "active-param",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'tab'",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tabs",
          "type": "Tab[]",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "Tab[]"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "tabChange",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [
        {
          "name": "indicator",
          "docs": ""
        },
        {
          "name": "panel",
          "docs": ""
        },
        {
          "name": "tab",
          "docs": ""
        },
        {
          "name": "tablist",
          "docs": ""
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/es-thinking-button/es-thinking-button.tsx",
      "encapsulation": "shadow",
      "tag": "es-thinking-button",
      "readme": "# es-thinking-button\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "action",
          "type": "(e: MouseEvent) => Promise<unknown>",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "(e: MouseEvent) => Promise<unknown>"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "color",
          "type": "\"primary\" | \"secondary\" | \"text\" | \"white\" | undefined",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "white",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "completeIcon",
          "type": "string",
          "mutable": false,
          "attr": "complete-icon",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'check'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "defaultIcon",
          "type": "string",
          "mutable": false,
          "attr": "default-icon",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "disabled",
          "type": "boolean | undefined",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "failedIcon",
          "type": "string",
          "mutable": false,
          "attr": "failed-icon",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'error'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "string | undefined",
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "thinkingIcon",
          "type": "string",
          "mutable": false,
          "attr": "thinking-icon",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'spinner'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"filled\" | \"link\" | \"minimal\" | \"outline\"",
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'minimal'",
          "values": [
            {
              "value": "filled",
              "type": "string"
            },
            {
              "value": "link",
              "type": "string"
            },
            {
              "value": "minimal",
              "type": "string"
            },
            {
              "value": "outline",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "es-button",
        "es-icon"
      ],
      "dependencyGraph": {
        "es-thinking-button": [
          "es-button",
          "es-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/toast/es-toast/es-toast.tsx",
      "encapsulation": "shadow",
      "tag": "es-toast",
      "readme": "# es-toast\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "count",
          "type": "number",
          "mutable": false,
          "attr": "count",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "level",
          "type": "\"error\" | \"info\" | \"success\" | \"warning\"",
          "mutable": false,
          "attr": "level",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "close() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "es-toaster"
      ],
      "dependencies": [
        "es-counter",
        "es-icon"
      ],
      "dependencyGraph": {
        "es-toast": [
          "es-counter",
          "es-icon"
        ],
        "es-toaster": [
          "es-toast"
        ]
      }
    },
    {
      "filePath": "./src/components/toast/es-toaster/es-toaster.tsx",
      "encapsulation": "shadow",
      "tag": "es-toaster",
      "readme": "# es-toaster\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [
        {
          "name": "popToast",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "popToast({ message, title, level, duration, icon, onClick, }: Bread) => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "es-toast"
      ],
      "dependencyGraph": {
        "es-toaster": [
          "es-toast"
        ],
        "es-toast": [
          "es-counter",
          "es-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/es-wizard/es-wizard.tsx",
      "encapsulation": "shadow",
      "tag": "es-wizard",
      "readme": "# es-wizard\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "location",
          "type": "string",
          "mutable": false,
          "attr": "location",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "pages",
          "type": "WizardPage[]",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "WizardPage[]"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "scrollOffset",
          "type": "number",
          "mutable": false,
          "attr": "scroll-offset",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    }
  ]
}