/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { FieldChange, ValidationMessages } from "./types";
import { MaskOptions } from "./components/masked-text/types";
import { RadioCardOption, RenderCard } from "./components/radio-card/types";
import { IconDescription } from "@eventstore-ui/components";
export { FieldChange, ValidationMessages } from "./types";
export { MaskOptions } from "./components/masked-text/types";
export { RadioCardOption, RenderCard } from "./components/radio-card/types";
export { IconDescription } from "@eventstore-ui/components";
export namespace Components {
    /**
     * A masked text input.
     */
    interface F2MaskedTextField {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Inline documentation text.
         */
        "documentation"?: string;
        /**
          * Inline documentation link.
         */
        "documentationLink"?: string;
        /**
          * Inline documentation link text.
         */
        "documentationLinkText"?: string;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the field is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the field.
         */
        "label": string;
        /**
          * Apply an input mask
         */
        "mask": MaskOptions;
        /**
          * The messages to display under the field.
         */
        "messages"?: ValidationMessages;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A masked text input.
     */
    interface F2MaskedTextInput {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the input is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * Apply an input mask
         */
        "mask": MaskOptions;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A number field.
     */
    interface F2NumberField {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Inline documentation text.
         */
        "documentation"?: string;
        /**
          * Inline documentation link.
         */
        "documentationLink"?: string;
        /**
          * Inline documentation link text.
         */
        "documentationLinkText"?: string;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the field is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the field.
         */
        "label": string;
        /**
          * The messages to display under the field.
         */
        "messages"?: ValidationMessages;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * Display a unit beside the input.
         */
        "unit"?: string;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A number based input.
     * Values should be passed around as strings, as numbers can round / floating point / overflow etc if a number type is used.
     */
    interface F2NumberInput {
        /**
          * If the field is disabled.
         */
        "disabled"?: boolean;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the field is currently in an error state.
         */
        "invalid"?: boolean;
        /**
          * The name of the field.
         */
        "name": string;
        /**
          * The placeholder for the input.
         */
        "placeholder"?: string;
        /**
          * If the field is editable.
         */
        "readonly"?: boolean;
        /**
          * Display a unit beside the input.
         */
        "unit"?: string;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A card based single select field.
     */
    interface F2RadioCardField {
        /**
          * Parts in the carld, to be exported on the top level.
         */
        "cardParts"?: string[];
        /**
          * Icon to display when checked.
         */
        "checkIcon": IconDescription;
        /**
          * If the field is disabled.
         */
        "disabled"?: boolean;
        /**
          * Inline documentation text.
         */
        "documentation"?: string;
        /**
          * Inline documentation link.
         */
        "documentationLink"?: string;
        /**
          * Inline documentation link text.
         */
        "documentationLinkText"?: string;
        /**
          * Group the cards by a key.
         */
        "groupBy"?: string;
        /**
          * If the field is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the field.
         */
        "label": string;
        /**
          * The messages to display under the field.
         */
        "messages"?: ValidationMessages;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * The options to be displayed and chosen from.
         */
        "options": RadioCardOption[];
        /**
          * Overwrite the default card renderer
         */
        "renderCard"?: RenderCard<any>;
        /**
          * The current value of the input.
         */
        "value": string | null;
    }
    /**
     * A card based single select input.
     */
    interface F2RadioCardInput {
        /**
          * Icon to display when checked.
         */
        "checkIcon": IconDescription;
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Group the cards by a key.
         */
        "groupBy"?: string;
        /**
          * If the input is currently in an error state.
         */
        "invalid": boolean;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * The options to be displayed and chosen from.
         */
        "options": RadioCardOption[];
        /**
          * Overwrite the default card renderer
         */
        "renderCard": RenderCard<any>;
        /**
          * The current value of the input.
         */
        "value": string | null;
    }
    /**
     * A text input.
     */
    interface F2TextField {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Inline documentation text.
         */
        "documentation"?: string;
        /**
          * Inline documentation link.
         */
        "documentationLink"?: string;
        /**
          * Inline documentation link text.
         */
        "documentationLinkText"?: string;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the field is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the field.
         */
        "label": string;
        /**
          * The messages to display under the field.
         */
        "messages"?: ValidationMessages;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A text input.
     */
    interface F2TextInput {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the input is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A textarea field.
     */
    interface F2TextareaField {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Inline documentation text.
         */
        "documentation"?: string;
        /**
          * Inline documentation link.
         */
        "documentationLink"?: string;
        /**
          * Inline documentation link text.
         */
        "documentationLinkText"?: string;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the field is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the field.
         */
        "label": string;
        /**
          * The messages to display under the field.
         */
        "messages"?: ValidationMessages;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A textarea input.
     */
    interface F2TextareaInput {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the input is currently in an error state.
         */
        "invalid"?: boolean;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * The current value of the input.
         */
        "value": string;
    }
    /**
     * Display messages under fields.
     */
    interface F2ValidationMessages {
        /**
          * Icon to diplay next to errors. (if `showIcons` or high contrast)
         */
        "errorIcon": IconDescription;
        /**
          * Icon to diplay next to infos. (if `showIcons` or high contrast)
         */
        "infoIcon": IconDescription;
        /**
          * The messages to display.
         */
        "messages"?: ValidationMessages;
        /**
          * Icon to diplay next to warnings. (if `showIcons` or high contrast)
         */
        "warningIcon": IconDescription;
    }
}
export interface F2MaskedTextFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLF2MaskedTextFieldElement;
}
export interface F2MaskedTextInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLF2MaskedTextInputElement;
}
export interface F2NumberFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLF2NumberFieldElement;
}
export interface F2NumberInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLF2NumberInputElement;
}
export interface F2RadioCardFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLF2RadioCardFieldElement;
}
export interface F2RadioCardInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLF2RadioCardInputElement;
}
export interface F2TextFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLF2TextFieldElement;
}
export interface F2TextInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLF2TextInputElement;
}
export interface F2TextareaFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLF2TextareaFieldElement;
}
export interface F2TextareaInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLF2TextareaInputElement;
}
declare global {
    interface HTMLF2MaskedTextFieldElementEventMap {
        "fieldchange": FieldChange<string>;
        "enter": any;
    }
    /**
     * A masked text input.
     */
    interface HTMLF2MaskedTextFieldElement extends Components.F2MaskedTextField, HTMLStencilElement {
        addEventListener<K extends keyof HTMLF2MaskedTextFieldElementEventMap>(type: K, listener: (this: HTMLF2MaskedTextFieldElement, ev: F2MaskedTextFieldCustomEvent<HTMLF2MaskedTextFieldElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLF2MaskedTextFieldElementEventMap>(type: K, listener: (this: HTMLF2MaskedTextFieldElement, ev: F2MaskedTextFieldCustomEvent<HTMLF2MaskedTextFieldElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLF2MaskedTextFieldElement: {
        prototype: HTMLF2MaskedTextFieldElement;
        new (): HTMLF2MaskedTextFieldElement;
    };
    interface HTMLF2MaskedTextInputElementEventMap {
        "fieldchange": FieldChange<string>;
        "enter": any;
    }
    /**
     * A masked text input.
     */
    interface HTMLF2MaskedTextInputElement extends Components.F2MaskedTextInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLF2MaskedTextInputElementEventMap>(type: K, listener: (this: HTMLF2MaskedTextInputElement, ev: F2MaskedTextInputCustomEvent<HTMLF2MaskedTextInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLF2MaskedTextInputElementEventMap>(type: K, listener: (this: HTMLF2MaskedTextInputElement, ev: F2MaskedTextInputCustomEvent<HTMLF2MaskedTextInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLF2MaskedTextInputElement: {
        prototype: HTMLF2MaskedTextInputElement;
        new (): HTMLF2MaskedTextInputElement;
    };
    interface HTMLF2NumberFieldElementEventMap {
        "fieldchange": FieldChange<string>;
    }
    /**
     * A number field.
     */
    interface HTMLF2NumberFieldElement extends Components.F2NumberField, HTMLStencilElement {
        addEventListener<K extends keyof HTMLF2NumberFieldElementEventMap>(type: K, listener: (this: HTMLF2NumberFieldElement, ev: F2NumberFieldCustomEvent<HTMLF2NumberFieldElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLF2NumberFieldElementEventMap>(type: K, listener: (this: HTMLF2NumberFieldElement, ev: F2NumberFieldCustomEvent<HTMLF2NumberFieldElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLF2NumberFieldElement: {
        prototype: HTMLF2NumberFieldElement;
        new (): HTMLF2NumberFieldElement;
    };
    interface HTMLF2NumberInputElementEventMap {
        "fieldchange": FieldChange<string>;
        "enter": any;
    }
    /**
     * A number based input.
     * Values should be passed around as strings, as numbers can round / floating point / overflow etc if a number type is used.
     */
    interface HTMLF2NumberInputElement extends Components.F2NumberInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLF2NumberInputElementEventMap>(type: K, listener: (this: HTMLF2NumberInputElement, ev: F2NumberInputCustomEvent<HTMLF2NumberInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLF2NumberInputElementEventMap>(type: K, listener: (this: HTMLF2NumberInputElement, ev: F2NumberInputCustomEvent<HTMLF2NumberInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLF2NumberInputElement: {
        prototype: HTMLF2NumberInputElement;
        new (): HTMLF2NumberInputElement;
    };
    interface HTMLF2RadioCardFieldElementEventMap {
        "fieldchange": FieldChange<string | null>;
    }
    /**
     * A card based single select field.
     */
    interface HTMLF2RadioCardFieldElement extends Components.F2RadioCardField, HTMLStencilElement {
        addEventListener<K extends keyof HTMLF2RadioCardFieldElementEventMap>(type: K, listener: (this: HTMLF2RadioCardFieldElement, ev: F2RadioCardFieldCustomEvent<HTMLF2RadioCardFieldElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLF2RadioCardFieldElementEventMap>(type: K, listener: (this: HTMLF2RadioCardFieldElement, ev: F2RadioCardFieldCustomEvent<HTMLF2RadioCardFieldElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLF2RadioCardFieldElement: {
        prototype: HTMLF2RadioCardFieldElement;
        new (): HTMLF2RadioCardFieldElement;
    };
    interface HTMLF2RadioCardInputElementEventMap {
        "fieldchange": FieldChange<string | null>;
    }
    /**
     * A card based single select input.
     */
    interface HTMLF2RadioCardInputElement extends Components.F2RadioCardInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLF2RadioCardInputElementEventMap>(type: K, listener: (this: HTMLF2RadioCardInputElement, ev: F2RadioCardInputCustomEvent<HTMLF2RadioCardInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLF2RadioCardInputElementEventMap>(type: K, listener: (this: HTMLF2RadioCardInputElement, ev: F2RadioCardInputCustomEvent<HTMLF2RadioCardInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLF2RadioCardInputElement: {
        prototype: HTMLF2RadioCardInputElement;
        new (): HTMLF2RadioCardInputElement;
    };
    interface HTMLF2TextFieldElementEventMap {
        "fieldchange": FieldChange<string>;
        "enter": any;
    }
    /**
     * A text input.
     */
    interface HTMLF2TextFieldElement extends Components.F2TextField, HTMLStencilElement {
        addEventListener<K extends keyof HTMLF2TextFieldElementEventMap>(type: K, listener: (this: HTMLF2TextFieldElement, ev: F2TextFieldCustomEvent<HTMLF2TextFieldElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLF2TextFieldElementEventMap>(type: K, listener: (this: HTMLF2TextFieldElement, ev: F2TextFieldCustomEvent<HTMLF2TextFieldElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLF2TextFieldElement: {
        prototype: HTMLF2TextFieldElement;
        new (): HTMLF2TextFieldElement;
    };
    interface HTMLF2TextInputElementEventMap {
        "fieldchange": FieldChange<string>;
        "enter": any;
    }
    /**
     * A text input.
     */
    interface HTMLF2TextInputElement extends Components.F2TextInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLF2TextInputElementEventMap>(type: K, listener: (this: HTMLF2TextInputElement, ev: F2TextInputCustomEvent<HTMLF2TextInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLF2TextInputElementEventMap>(type: K, listener: (this: HTMLF2TextInputElement, ev: F2TextInputCustomEvent<HTMLF2TextInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLF2TextInputElement: {
        prototype: HTMLF2TextInputElement;
        new (): HTMLF2TextInputElement;
    };
    interface HTMLF2TextareaFieldElementEventMap {
        "fieldchange": FieldChange<string>;
    }
    /**
     * A textarea field.
     */
    interface HTMLF2TextareaFieldElement extends Components.F2TextareaField, HTMLStencilElement {
        addEventListener<K extends keyof HTMLF2TextareaFieldElementEventMap>(type: K, listener: (this: HTMLF2TextareaFieldElement, ev: F2TextareaFieldCustomEvent<HTMLF2TextareaFieldElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLF2TextareaFieldElementEventMap>(type: K, listener: (this: HTMLF2TextareaFieldElement, ev: F2TextareaFieldCustomEvent<HTMLF2TextareaFieldElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLF2TextareaFieldElement: {
        prototype: HTMLF2TextareaFieldElement;
        new (): HTMLF2TextareaFieldElement;
    };
    interface HTMLF2TextareaInputElementEventMap {
        "fieldchange": FieldChange<string>;
    }
    /**
     * A textarea input.
     */
    interface HTMLF2TextareaInputElement extends Components.F2TextareaInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLF2TextareaInputElementEventMap>(type: K, listener: (this: HTMLF2TextareaInputElement, ev: F2TextareaInputCustomEvent<HTMLF2TextareaInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLF2TextareaInputElementEventMap>(type: K, listener: (this: HTMLF2TextareaInputElement, ev: F2TextareaInputCustomEvent<HTMLF2TextareaInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLF2TextareaInputElement: {
        prototype: HTMLF2TextareaInputElement;
        new (): HTMLF2TextareaInputElement;
    };
    /**
     * Display messages under fields.
     */
    interface HTMLF2ValidationMessagesElement extends Components.F2ValidationMessages, HTMLStencilElement {
    }
    var HTMLF2ValidationMessagesElement: {
        prototype: HTMLF2ValidationMessagesElement;
        new (): HTMLF2ValidationMessagesElement;
    };
    interface HTMLElementTagNameMap {
        "f2-masked-text-field": HTMLF2MaskedTextFieldElement;
        "f2-masked-text-input": HTMLF2MaskedTextInputElement;
        "f2-number-field": HTMLF2NumberFieldElement;
        "f2-number-input": HTMLF2NumberInputElement;
        "f2-radio-card-field": HTMLF2RadioCardFieldElement;
        "f2-radio-card-input": HTMLF2RadioCardInputElement;
        "f2-text-field": HTMLF2TextFieldElement;
        "f2-text-input": HTMLF2TextInputElement;
        "f2-textarea-field": HTMLF2TextareaFieldElement;
        "f2-textarea-input": HTMLF2TextareaInputElement;
        "f2-validation-messages": HTMLF2ValidationMessagesElement;
    }
}
declare namespace LocalJSX {
    /**
     * A masked text input.
     */
    interface F2MaskedTextField {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Inline documentation text.
         */
        "documentation"?: string;
        /**
          * Inline documentation link.
         */
        "documentationLink"?: string;
        /**
          * Inline documentation link text.
         */
        "documentationLinkText"?: string;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the field is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the field.
         */
        "label": string;
        /**
          * Apply an input mask
         */
        "mask": MaskOptions;
        /**
          * The messages to display under the field.
         */
        "messages"?: ValidationMessages;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * Emitted on keyup of enter, if no modifier keys are held.
         */
        "onEnter"?: (event: F2MaskedTextFieldCustomEvent<any>) => void;
        /**
          * Emitted when the value of the field is changed.
         */
        "onFieldchange"?: (event: F2MaskedTextFieldCustomEvent<FieldChange<string>>) => void;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A masked text input.
     */
    interface F2MaskedTextInput {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the input is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * Apply an input mask
         */
        "mask": MaskOptions;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * Emitted on keyup of enter, if no modifier keys are held.
         */
        "onEnter"?: (event: F2MaskedTextInputCustomEvent<any>) => void;
        /**
          * Emitted when the value of the field is changed.
         */
        "onFieldchange"?: (event: F2MaskedTextInputCustomEvent<FieldChange<string>>) => void;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A number field.
     */
    interface F2NumberField {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Inline documentation text.
         */
        "documentation"?: string;
        /**
          * Inline documentation link.
         */
        "documentationLink"?: string;
        /**
          * Inline documentation link text.
         */
        "documentationLinkText"?: string;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the field is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the field.
         */
        "label": string;
        /**
          * The messages to display under the field.
         */
        "messages"?: ValidationMessages;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * Emitted when the value of the field is changed.
         */
        "onFieldchange"?: (event: F2NumberFieldCustomEvent<FieldChange<string>>) => void;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * Display a unit beside the input.
         */
        "unit"?: string;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A number based input.
     * Values should be passed around as strings, as numbers can round / floating point / overflow etc if a number type is used.
     */
    interface F2NumberInput {
        /**
          * If the field is disabled.
         */
        "disabled"?: boolean;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the field is currently in an error state.
         */
        "invalid"?: boolean;
        /**
          * The name of the field.
         */
        "name": string;
        /**
          * Emitted on keyup of enter, if no modifier keys are held.
         */
        "onEnter"?: (event: F2NumberInputCustomEvent<any>) => void;
        /**
          * Emitted when the value of the field is changed.
         */
        "onFieldchange"?: (event: F2NumberInputCustomEvent<FieldChange<string>>) => void;
        /**
          * The placeholder for the input.
         */
        "placeholder"?: string;
        /**
          * If the field is editable.
         */
        "readonly"?: boolean;
        /**
          * Display a unit beside the input.
         */
        "unit"?: string;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A card based single select field.
     */
    interface F2RadioCardField {
        /**
          * Parts in the carld, to be exported on the top level.
         */
        "cardParts"?: string[];
        /**
          * Icon to display when checked.
         */
        "checkIcon"?: IconDescription;
        /**
          * If the field is disabled.
         */
        "disabled"?: boolean;
        /**
          * Inline documentation text.
         */
        "documentation"?: string;
        /**
          * Inline documentation link.
         */
        "documentationLink"?: string;
        /**
          * Inline documentation link text.
         */
        "documentationLinkText"?: string;
        /**
          * Group the cards by a key.
         */
        "groupBy"?: string;
        /**
          * If the field is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the field.
         */
        "label": string;
        /**
          * The messages to display under the field.
         */
        "messages"?: ValidationMessages;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * Emitted when the value of the field is changed.
         */
        "onFieldchange"?: (event: F2RadioCardFieldCustomEvent<FieldChange<string | null>>) => void;
        /**
          * The options to be displayed and chosen from.
         */
        "options": RadioCardOption[];
        /**
          * Overwrite the default card renderer
         */
        "renderCard"?: RenderCard<any>;
        /**
          * The current value of the input.
         */
        "value": string | null;
    }
    /**
     * A card based single select input.
     */
    interface F2RadioCardInput {
        /**
          * Icon to display when checked.
         */
        "checkIcon"?: IconDescription;
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Group the cards by a key.
         */
        "groupBy"?: string;
        /**
          * If the input is currently in an error state.
         */
        "invalid"?: boolean;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * Emitted when the value of the field is changed.
         */
        "onFieldchange"?: (event: F2RadioCardInputCustomEvent<FieldChange<string | null>>) => void;
        /**
          * The options to be displayed and chosen from.
         */
        "options": RadioCardOption[];
        /**
          * Overwrite the default card renderer
         */
        "renderCard"?: RenderCard<any>;
        /**
          * The current value of the input.
         */
        "value": string | null;
    }
    /**
     * A text input.
     */
    interface F2TextField {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Inline documentation text.
         */
        "documentation"?: string;
        /**
          * Inline documentation link.
         */
        "documentationLink"?: string;
        /**
          * Inline documentation link text.
         */
        "documentationLinkText"?: string;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the field is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the field.
         */
        "label": string;
        /**
          * The messages to display under the field.
         */
        "messages"?: ValidationMessages;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * Emitted on keyup of enter, if no modifier keys are held.
         */
        "onEnter"?: (event: F2TextFieldCustomEvent<any>) => void;
        /**
          * Emitted when the value of the field is changed.
         */
        "onFieldchange"?: (event: F2TextFieldCustomEvent<FieldChange<string>>) => void;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A text input.
     */
    interface F2TextInput {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the input is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * Emitted on keyup of enter, if no modifier keys are held.
         */
        "onEnter"?: (event: F2TextInputCustomEvent<any>) => void;
        /**
          * Emitted when the value of the field is changed.
         */
        "onFieldchange"?: (event: F2TextInputCustomEvent<FieldChange<string>>) => void;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A textarea field.
     */
    interface F2TextareaField {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Inline documentation text.
         */
        "documentation"?: string;
        /**
          * Inline documentation link.
         */
        "documentationLink"?: string;
        /**
          * Inline documentation link text.
         */
        "documentationLinkText"?: string;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the field is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the field.
         */
        "label": string;
        /**
          * The messages to display under the field.
         */
        "messages"?: ValidationMessages;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * Emitted when the value of the field is changed.
         */
        "onFieldchange"?: (event: F2TextareaFieldCustomEvent<FieldChange<string>>) => void;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A textarea input.
     */
    interface F2TextareaInput {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the input is currently in an error state.
         */
        "invalid"?: boolean;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * Emitted when the value of the field is changed.
         */
        "onFieldchange"?: (event: F2TextareaInputCustomEvent<FieldChange<string>>) => void;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * The current value of the input.
         */
        "value": string;
    }
    /**
     * Display messages under fields.
     */
    interface F2ValidationMessages {
        /**
          * Icon to diplay next to errors. (if `showIcons` or high contrast)
         */
        "errorIcon"?: IconDescription;
        /**
          * Icon to diplay next to infos. (if `showIcons` or high contrast)
         */
        "infoIcon"?: IconDescription;
        /**
          * The messages to display.
         */
        "messages"?: ValidationMessages;
        /**
          * Icon to diplay next to warnings. (if `showIcons` or high contrast)
         */
        "warningIcon"?: IconDescription;
    }
    interface IntrinsicElements {
        "f2-masked-text-field": F2MaskedTextField;
        "f2-masked-text-input": F2MaskedTextInput;
        "f2-number-field": F2NumberField;
        "f2-number-input": F2NumberInput;
        "f2-radio-card-field": F2RadioCardField;
        "f2-radio-card-input": F2RadioCardInput;
        "f2-text-field": F2TextField;
        "f2-text-input": F2TextInput;
        "f2-textarea-field": F2TextareaField;
        "f2-textarea-input": F2TextareaInput;
        "f2-validation-messages": F2ValidationMessages;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * A masked text input.
             */
            "f2-masked-text-field": LocalJSX.F2MaskedTextField & JSXBase.HTMLAttributes<HTMLF2MaskedTextFieldElement>;
            /**
             * A masked text input.
             */
            "f2-masked-text-input": LocalJSX.F2MaskedTextInput & JSXBase.HTMLAttributes<HTMLF2MaskedTextInputElement>;
            /**
             * A number field.
             */
            "f2-number-field": LocalJSX.F2NumberField & JSXBase.HTMLAttributes<HTMLF2NumberFieldElement>;
            /**
             * A number based input.
             * Values should be passed around as strings, as numbers can round / floating point / overflow etc if a number type is used.
             */
            "f2-number-input": LocalJSX.F2NumberInput & JSXBase.HTMLAttributes<HTMLF2NumberInputElement>;
            /**
             * A card based single select field.
             */
            "f2-radio-card-field": LocalJSX.F2RadioCardField & JSXBase.HTMLAttributes<HTMLF2RadioCardFieldElement>;
            /**
             * A card based single select input.
             */
            "f2-radio-card-input": LocalJSX.F2RadioCardInput & JSXBase.HTMLAttributes<HTMLF2RadioCardInputElement>;
            /**
             * A text input.
             */
            "f2-text-field": LocalJSX.F2TextField & JSXBase.HTMLAttributes<HTMLF2TextFieldElement>;
            /**
             * A text input.
             */
            "f2-text-input": LocalJSX.F2TextInput & JSXBase.HTMLAttributes<HTMLF2TextInputElement>;
            /**
             * A textarea field.
             */
            "f2-textarea-field": LocalJSX.F2TextareaField & JSXBase.HTMLAttributes<HTMLF2TextareaFieldElement>;
            /**
             * A textarea input.
             */
            "f2-textarea-input": LocalJSX.F2TextareaInput & JSXBase.HTMLAttributes<HTMLF2TextareaInputElement>;
            /**
             * Display messages under fields.
             */
            "f2-validation-messages": LocalJSX.F2ValidationMessages & JSXBase.HTMLAttributes<HTMLF2ValidationMessagesElement>;
        }
    }
}
