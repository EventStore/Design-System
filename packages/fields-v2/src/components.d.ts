/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { FieldChange, RenderFunction, ValidationMessages } from "./types";
import { MaskOptions } from "./components/masked-text/types";
import { RadioCardOption, RenderCard } from "./components/radio-card/types";
import { IconDescription } from "@eventstore-ui/components";
import { OptionFilter, RenderTypeaheadOption, TypeaheadOption } from "./components/typeahead/types";
import { RenderSelectValue } from "./components/select/types";
import { OptionFilter as OptionFilter1, RenderTypeaheadInput, RenderTypeaheadOption as RenderTypeaheadOption1, TypeaheadOption as TypeaheadOption1 } from "./components/typeahead/types";
export { FieldChange, RenderFunction, ValidationMessages } from "./types";
export { MaskOptions } from "./components/masked-text/types";
export { RadioCardOption, RenderCard } from "./components/radio-card/types";
export { IconDescription } from "@eventstore-ui/components";
export { OptionFilter, RenderTypeaheadOption, TypeaheadOption } from "./components/typeahead/types";
export { RenderSelectValue } from "./components/select/types";
export { OptionFilter as OptionFilter1, RenderTypeaheadInput, RenderTypeaheadOption as RenderTypeaheadOption1, TypeaheadOption as TypeaheadOption1 } from "./components/typeahead/types";
export namespace Components {
    /**
     * A masked text input.
     */
    interface F2MaskedTextField {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Inline documentation text.
         */
        "documentation"?: string;
        /**
          * Inline documentation link.
         */
        "documentationLink"?: string;
        /**
          * Inline documentation link text.
         */
        "documentationLinkText"?: string;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the field is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the field.
         */
        "label": string;
        /**
          * Apply an input mask
         */
        "mask": MaskOptions;
        /**
          * The messages to display under the field.
         */
        "messages"?: ValidationMessages;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A masked text input.
     */
    interface F2MaskedTextInput {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the input is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * Apply an input mask
         */
        "mask": MaskOptions;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A number field.
     */
    interface F2NumberField {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Inline documentation text.
         */
        "documentation"?: string;
        /**
          * Inline documentation link.
         */
        "documentationLink"?: string;
        /**
          * Inline documentation link text.
         */
        "documentationLinkText"?: string;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the field is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the field.
         */
        "label": string;
        /**
          * The messages to display under the field.
         */
        "messages"?: ValidationMessages;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * Display a unit beside the input.
         */
        "unit"?: string;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A number based input.
     * Values should be passed around as strings, as numbers can round / floating point / overflow etc if a number type is used.
     */
    interface F2NumberInput {
        /**
          * If the field is disabled.
         */
        "disabled"?: boolean;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the field is currently in an error state.
         */
        "invalid"?: boolean;
        /**
          * The name of the field.
         */
        "name": string;
        /**
          * The placeholder for the input.
         */
        "placeholder"?: string;
        /**
          * If the field is editable.
         */
        "readonly"?: boolean;
        /**
          * Display a unit beside the input.
         */
        "unit"?: string;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A card based single select field.
     */
    interface F2RadioCardField {
        /**
          * Parts in the carld, to be exported on the top level.
         */
        "cardParts"?: string[];
        /**
          * Icon to display when checked.
         */
        "checkIcon": IconDescription;
        /**
          * If the field is disabled.
         */
        "disabled"?: boolean;
        /**
          * Inline documentation text.
         */
        "documentation"?: string;
        /**
          * Inline documentation link.
         */
        "documentationLink"?: string;
        /**
          * Inline documentation link text.
         */
        "documentationLinkText"?: string;
        /**
          * Group the cards by a key.
         */
        "groupBy"?: string;
        /**
          * If the field is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the field.
         */
        "label": string;
        /**
          * The messages to display under the field.
         */
        "messages"?: ValidationMessages;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * The options to be displayed and chosen from.
         */
        "options": RadioCardOption[];
        /**
          * Overwrite the default card renderer
         */
        "renderCard"?: RenderCard<any>;
        /**
          * The current value of the input.
         */
        "value": string | null;
    }
    /**
     * A card based single select input.
     */
    interface F2RadioCardInput {
        /**
          * Icon to display when checked.
         */
        "checkIcon": IconDescription;
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Group the cards by a key.
         */
        "groupBy"?: string;
        /**
          * If the input is currently in an error state.
         */
        "invalid": boolean;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * The options to be displayed and chosen from.
         */
        "options": RadioCardOption[];
        /**
          * Overwrite the default card renderer
         */
        "renderCard": RenderCard<any>;
        /**
          * The current value of the input.
         */
        "value": string | null;
    }
    /**
     * A text input.
     */
    interface F2SelectField {
        /**
          * Icon to use as a chevron.
         */
        "chevronIcon"?: IconDescription;
        /**
          * If the field is disabled.
         */
        "disabled"?: boolean;
        /**
          * Inline documentation text.
         */
        "documentation"?: string;
        /**
          * Inline documentation link.
         */
        "documentationLink"?: string;
        /**
          * Inline documentation link text.
         */
        "documentationLinkText"?: string;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the field is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the field.
         */
        "label": string;
        /**
          * The messages to display under the field.
         */
        "messages"?: ValidationMessages;
        /**
          * The name of the field.
         */
        "name": string;
        /**
          * Pass a custom search filter function
         */
        "optionFilter"?: OptionFilter;
        /**
          * A list of options to choose from.
         */
        "options": TypeaheadOption[];
        /**
          * The placeholder for the input.
         */
        "placeholder"?: string;
        /**
          * If the field is editable.
         */
        "readonly"?: boolean;
        /**
          * Overwrite the default option renderer.
         */
        "renderOption"?: RenderTypeaheadOption<any>;
        /**
          * Overwrite the default value renderer.
         */
        "renderValue"?: RenderSelectValue<any>;
        /**
          * The current value of the field.
         */
        "value": string | null;
    }
    /**
     * A searchable select dropdown.
     */
    interface F2SelectInput {
        /**
          * Icon to use as a chevron.
         */
        "chevronIcon": IconDescription;
        /**
          * If the field is disabled.
         */
        "disabled"?: boolean;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the field is currently in an error state.
         */
        "invalid"?: boolean;
        /**
          * The name of the field.
         */
        "name": string;
        /**
          * Pass a custom search filter function
         */
        "optionFilter"?: OptionFilter;
        /**
          * A list of options to choose from.
         */
        "options": TypeaheadOption[];
        /**
          * The placeholder for the input.
         */
        "placeholder"?: string;
        /**
          * If the field is editable.
         */
        "readonly"?: boolean;
        /**
          * Overwrite the default option renderer.
         */
        "renderOption"?: RenderTypeaheadOption<any>;
        /**
          * Overwrite the default value renderer.
         */
        "renderValue": RenderSelectValue<any>;
        /**
          * The current value of the field.
         */
        "value": string | null;
    }
    /**
     * Create a list from a fixed set of values.
     */
    interface F2SelectListField {
        /**
          * The icon to display next to the field
         */
        "addIcon": IconDescription;
        /**
          * Icon to use as a chevron.
         */
        "chevronIcon": IconDescription;
        /**
          * Icon for the delete button.
         */
        "deleteIcon": IconDescription;
        /**
          * If the field is disabled.
         */
        "disabled"?: boolean;
        /**
          * Inline documentation text.
         */
        "documentation"?: string;
        /**
          * Inline documentation link.
         */
        "documentationLink"?: string;
        /**
          * Inline documentation link text.
         */
        "documentationLinkText"?: string;
        /**
          * The icon to display next to the field
         */
        "icon"?: IconDescription;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the field is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the field.
         */
        "label": string;
        /**
          * The messages to display under the field.
         */
        "messages"?: ValidationMessages;
        /**
          * The name of the field.
         */
        "name": string;
        /**
          * A list of options to choose from.
         */
        "options": TypeaheadOption[];
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * Render the list item.
         */
        "renderItem": RenderFunction<[option: TypeaheadOption]>;
        /**
          * The selected item ids
         */
        "value": string[];
    }
    /**
     * A text input.
     */
    interface F2TextField {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Inline documentation text.
         */
        "documentation"?: string;
        /**
          * Inline documentation link.
         */
        "documentationLink"?: string;
        /**
          * Inline documentation link text.
         */
        "documentationLinkText"?: string;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the field is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the field.
         */
        "label": string;
        /**
          * The messages to display under the field.
         */
        "messages"?: ValidationMessages;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A text input.
     */
    interface F2TextInput {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the input is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A list creator input.
     */
    interface F2TextListField {
        /**
          * Icon for the add item button.
         */
        "additionIcon": IconDescription;
        /**
          * Text for the add item button.
         */
        "additionText": string;
        /**
          * Icon for the delete button.
         */
        "deleteIcon": IconDescription;
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Inline documentation text.
         */
        "documentation"?: string;
        /**
          * Inline documentation link.
         */
        "documentationLink"?: string;
        /**
          * Inline documentation link text.
         */
        "documentationLinkText"?: string;
        /**
          * If the field is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the field.
         */
        "label": string;
        /**
          * The messages to display under the field.
         */
        "messages"?: ValidationMessages;
        /**
          * The name of the field.
         */
        "name": string;
        /**
          * Display a placeholder in the input.
         */
        "placeholder": string;
        /**
          * The currently selected values
         */
        "value": string[];
    }
    /**
     * A textarea field.
     */
    interface F2TextareaField {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Inline documentation text.
         */
        "documentation"?: string;
        /**
          * Inline documentation link.
         */
        "documentationLink"?: string;
        /**
          * Inline documentation link text.
         */
        "documentationLinkText"?: string;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the field is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the field.
         */
        "label": string;
        /**
          * The messages to display under the field.
         */
        "messages"?: ValidationMessages;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A textarea input.
     */
    interface F2TextareaInput {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the input is currently in an error state.
         */
        "invalid"?: boolean;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * The current value of the input.
         */
        "value": string;
    }
    interface F2Typeahead {
        "clearOnSelect": boolean;
        "closeOnSelect": boolean;
        "disabled"?: boolean;
        "name": string;
        "optionFilter": OptionFilter1;
        "options": TypeaheadOption1[];
        "readonly"?: boolean;
        "renderInput": RenderTypeaheadInput;
        "renderOption": RenderTypeaheadOption1;
        "value": string[];
    }
    /**
     * Display messages under fields.
     */
    interface F2ValidationMessages {
        /**
          * Icon to diplay next to errors. (if `showIcons` or high contrast)
         */
        "errorIcon": IconDescription;
        /**
          * Icon to diplay next to infos. (if `showIcons` or high contrast)
         */
        "infoIcon": IconDescription;
        /**
          * The messages to display.
         */
        "messages"?: ValidationMessages;
        /**
          * Icon to diplay next to warnings. (if `showIcons` or high contrast)
         */
        "warningIcon": IconDescription;
    }
    /**
     * masked-text-field demo.
     */
    interface MaskedTextFieldDemo {
    }
    /**
     * masked-text-input demo.
     */
    interface MaskedTextInputDemo {
    }
    /**
     * number-field demo.
     */
    interface NumberFieldDemo {
    }
    /**
     * number-input demo.
     */
    interface NumberInputDemo {
    }
    /**
     * radio-card-field demo.
     */
    interface RadioCardFieldDemo {
    }
    /**
     * radio-card-input demo.
     */
    interface RadioCardInputDemo {
    }
    /**
     * select-field demo.
     */
    interface SelectFieldDemo {
    }
    /**
     * select-input demo.
     */
    interface SelectInputDemo {
    }
    /**
     * select-list-field demo.
     */
    interface SelectListFieldDemo {
    }
    /**
     * used in the es-select demo.
     */
    interface SelectOptionDemo {
        "name": string;
        "value": string;
    }
    /**
     * text-field demo.
     */
    interface TextFieldDemo {
    }
    /**
     * text-input demo.
     */
    interface TextInputDemo {
    }
    /**
     * text-list-field demo.
     */
    interface TextListFieldDemo {
    }
    /**
     * textarea-field demo.
     */
    interface TextareaFieldDemo {
    }
    /**
     * textarea-input demo.
     */
    interface TextareaInputDemo {
    }
}
export interface F2MaskedTextFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLF2MaskedTextFieldElement;
}
export interface F2MaskedTextInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLF2MaskedTextInputElement;
}
export interface F2NumberFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLF2NumberFieldElement;
}
export interface F2NumberInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLF2NumberInputElement;
}
export interface F2RadioCardFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLF2RadioCardFieldElement;
}
export interface F2RadioCardInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLF2RadioCardInputElement;
}
export interface F2SelectFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLF2SelectFieldElement;
}
export interface F2SelectInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLF2SelectInputElement;
}
export interface F2SelectListFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLF2SelectListFieldElement;
}
export interface F2TextFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLF2TextFieldElement;
}
export interface F2TextInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLF2TextInputElement;
}
export interface F2TextListFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLF2TextListFieldElement;
}
export interface F2TextareaFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLF2TextareaFieldElement;
}
export interface F2TextareaInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLF2TextareaInputElement;
}
export interface F2TypeaheadCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLF2TypeaheadElement;
}
declare global {
    interface HTMLF2MaskedTextFieldElementEventMap {
        "fieldchange": FieldChange<string>;
        "enter": any;
    }
    /**
     * A masked text input.
     */
    interface HTMLF2MaskedTextFieldElement extends Components.F2MaskedTextField, HTMLStencilElement {
        addEventListener<K extends keyof HTMLF2MaskedTextFieldElementEventMap>(type: K, listener: (this: HTMLF2MaskedTextFieldElement, ev: F2MaskedTextFieldCustomEvent<HTMLF2MaskedTextFieldElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLF2MaskedTextFieldElementEventMap>(type: K, listener: (this: HTMLF2MaskedTextFieldElement, ev: F2MaskedTextFieldCustomEvent<HTMLF2MaskedTextFieldElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLF2MaskedTextFieldElement: {
        prototype: HTMLF2MaskedTextFieldElement;
        new (): HTMLF2MaskedTextFieldElement;
    };
    interface HTMLF2MaskedTextInputElementEventMap {
        "fieldchange": FieldChange<string>;
        "enter": any;
    }
    /**
     * A masked text input.
     */
    interface HTMLF2MaskedTextInputElement extends Components.F2MaskedTextInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLF2MaskedTextInputElementEventMap>(type: K, listener: (this: HTMLF2MaskedTextInputElement, ev: F2MaskedTextInputCustomEvent<HTMLF2MaskedTextInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLF2MaskedTextInputElementEventMap>(type: K, listener: (this: HTMLF2MaskedTextInputElement, ev: F2MaskedTextInputCustomEvent<HTMLF2MaskedTextInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLF2MaskedTextInputElement: {
        prototype: HTMLF2MaskedTextInputElement;
        new (): HTMLF2MaskedTextInputElement;
    };
    interface HTMLF2NumberFieldElementEventMap {
        "fieldchange": FieldChange<string>;
    }
    /**
     * A number field.
     */
    interface HTMLF2NumberFieldElement extends Components.F2NumberField, HTMLStencilElement {
        addEventListener<K extends keyof HTMLF2NumberFieldElementEventMap>(type: K, listener: (this: HTMLF2NumberFieldElement, ev: F2NumberFieldCustomEvent<HTMLF2NumberFieldElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLF2NumberFieldElementEventMap>(type: K, listener: (this: HTMLF2NumberFieldElement, ev: F2NumberFieldCustomEvent<HTMLF2NumberFieldElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLF2NumberFieldElement: {
        prototype: HTMLF2NumberFieldElement;
        new (): HTMLF2NumberFieldElement;
    };
    interface HTMLF2NumberInputElementEventMap {
        "fieldchange": FieldChange<string>;
        "enter": any;
    }
    /**
     * A number based input.
     * Values should be passed around as strings, as numbers can round / floating point / overflow etc if a number type is used.
     */
    interface HTMLF2NumberInputElement extends Components.F2NumberInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLF2NumberInputElementEventMap>(type: K, listener: (this: HTMLF2NumberInputElement, ev: F2NumberInputCustomEvent<HTMLF2NumberInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLF2NumberInputElementEventMap>(type: K, listener: (this: HTMLF2NumberInputElement, ev: F2NumberInputCustomEvent<HTMLF2NumberInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLF2NumberInputElement: {
        prototype: HTMLF2NumberInputElement;
        new (): HTMLF2NumberInputElement;
    };
    interface HTMLF2RadioCardFieldElementEventMap {
        "fieldchange": FieldChange<string | null>;
    }
    /**
     * A card based single select field.
     */
    interface HTMLF2RadioCardFieldElement extends Components.F2RadioCardField, HTMLStencilElement {
        addEventListener<K extends keyof HTMLF2RadioCardFieldElementEventMap>(type: K, listener: (this: HTMLF2RadioCardFieldElement, ev: F2RadioCardFieldCustomEvent<HTMLF2RadioCardFieldElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLF2RadioCardFieldElementEventMap>(type: K, listener: (this: HTMLF2RadioCardFieldElement, ev: F2RadioCardFieldCustomEvent<HTMLF2RadioCardFieldElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLF2RadioCardFieldElement: {
        prototype: HTMLF2RadioCardFieldElement;
        new (): HTMLF2RadioCardFieldElement;
    };
    interface HTMLF2RadioCardInputElementEventMap {
        "fieldchange": FieldChange<string | null>;
    }
    /**
     * A card based single select input.
     */
    interface HTMLF2RadioCardInputElement extends Components.F2RadioCardInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLF2RadioCardInputElementEventMap>(type: K, listener: (this: HTMLF2RadioCardInputElement, ev: F2RadioCardInputCustomEvent<HTMLF2RadioCardInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLF2RadioCardInputElementEventMap>(type: K, listener: (this: HTMLF2RadioCardInputElement, ev: F2RadioCardInputCustomEvent<HTMLF2RadioCardInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLF2RadioCardInputElement: {
        prototype: HTMLF2RadioCardInputElement;
        new (): HTMLF2RadioCardInputElement;
    };
    interface HTMLF2SelectFieldElementEventMap {
        "fieldchange": FieldChange<string>;
        "enter": any;
    }
    /**
     * A text input.
     */
    interface HTMLF2SelectFieldElement extends Components.F2SelectField, HTMLStencilElement {
        addEventListener<K extends keyof HTMLF2SelectFieldElementEventMap>(type: K, listener: (this: HTMLF2SelectFieldElement, ev: F2SelectFieldCustomEvent<HTMLF2SelectFieldElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLF2SelectFieldElementEventMap>(type: K, listener: (this: HTMLF2SelectFieldElement, ev: F2SelectFieldCustomEvent<HTMLF2SelectFieldElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLF2SelectFieldElement: {
        prototype: HTMLF2SelectFieldElement;
        new (): HTMLF2SelectFieldElement;
    };
    interface HTMLF2SelectInputElementEventMap {
        "fieldchange": FieldChange<string | null>;
    }
    /**
     * A searchable select dropdown.
     */
    interface HTMLF2SelectInputElement extends Components.F2SelectInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLF2SelectInputElementEventMap>(type: K, listener: (this: HTMLF2SelectInputElement, ev: F2SelectInputCustomEvent<HTMLF2SelectInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLF2SelectInputElementEventMap>(type: K, listener: (this: HTMLF2SelectInputElement, ev: F2SelectInputCustomEvent<HTMLF2SelectInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLF2SelectInputElement: {
        prototype: HTMLF2SelectInputElement;
        new (): HTMLF2SelectInputElement;
    };
    interface HTMLF2SelectListFieldElementEventMap {
        "fieldchange": FieldChange<string[]>;
    }
    /**
     * Create a list from a fixed set of values.
     */
    interface HTMLF2SelectListFieldElement extends Components.F2SelectListField, HTMLStencilElement {
        addEventListener<K extends keyof HTMLF2SelectListFieldElementEventMap>(type: K, listener: (this: HTMLF2SelectListFieldElement, ev: F2SelectListFieldCustomEvent<HTMLF2SelectListFieldElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLF2SelectListFieldElementEventMap>(type: K, listener: (this: HTMLF2SelectListFieldElement, ev: F2SelectListFieldCustomEvent<HTMLF2SelectListFieldElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLF2SelectListFieldElement: {
        prototype: HTMLF2SelectListFieldElement;
        new (): HTMLF2SelectListFieldElement;
    };
    interface HTMLF2TextFieldElementEventMap {
        "fieldchange": FieldChange<string>;
        "enter": any;
    }
    /**
     * A text input.
     */
    interface HTMLF2TextFieldElement extends Components.F2TextField, HTMLStencilElement {
        addEventListener<K extends keyof HTMLF2TextFieldElementEventMap>(type: K, listener: (this: HTMLF2TextFieldElement, ev: F2TextFieldCustomEvent<HTMLF2TextFieldElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLF2TextFieldElementEventMap>(type: K, listener: (this: HTMLF2TextFieldElement, ev: F2TextFieldCustomEvent<HTMLF2TextFieldElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLF2TextFieldElement: {
        prototype: HTMLF2TextFieldElement;
        new (): HTMLF2TextFieldElement;
    };
    interface HTMLF2TextInputElementEventMap {
        "fieldchange": FieldChange<string>;
        "enter": any;
    }
    /**
     * A text input.
     */
    interface HTMLF2TextInputElement extends Components.F2TextInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLF2TextInputElementEventMap>(type: K, listener: (this: HTMLF2TextInputElement, ev: F2TextInputCustomEvent<HTMLF2TextInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLF2TextInputElementEventMap>(type: K, listener: (this: HTMLF2TextInputElement, ev: F2TextInputCustomEvent<HTMLF2TextInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLF2TextInputElement: {
        prototype: HTMLF2TextInputElement;
        new (): HTMLF2TextInputElement;
    };
    interface HTMLF2TextListFieldElementEventMap {
        "fieldchange": FieldChange<string[]>;
    }
    /**
     * A list creator input.
     */
    interface HTMLF2TextListFieldElement extends Components.F2TextListField, HTMLStencilElement {
        addEventListener<K extends keyof HTMLF2TextListFieldElementEventMap>(type: K, listener: (this: HTMLF2TextListFieldElement, ev: F2TextListFieldCustomEvent<HTMLF2TextListFieldElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLF2TextListFieldElementEventMap>(type: K, listener: (this: HTMLF2TextListFieldElement, ev: F2TextListFieldCustomEvent<HTMLF2TextListFieldElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLF2TextListFieldElement: {
        prototype: HTMLF2TextListFieldElement;
        new (): HTMLF2TextListFieldElement;
    };
    interface HTMLF2TextareaFieldElementEventMap {
        "fieldchange": FieldChange<string>;
    }
    /**
     * A textarea field.
     */
    interface HTMLF2TextareaFieldElement extends Components.F2TextareaField, HTMLStencilElement {
        addEventListener<K extends keyof HTMLF2TextareaFieldElementEventMap>(type: K, listener: (this: HTMLF2TextareaFieldElement, ev: F2TextareaFieldCustomEvent<HTMLF2TextareaFieldElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLF2TextareaFieldElementEventMap>(type: K, listener: (this: HTMLF2TextareaFieldElement, ev: F2TextareaFieldCustomEvent<HTMLF2TextareaFieldElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLF2TextareaFieldElement: {
        prototype: HTMLF2TextareaFieldElement;
        new (): HTMLF2TextareaFieldElement;
    };
    interface HTMLF2TextareaInputElementEventMap {
        "fieldchange": FieldChange<string>;
    }
    /**
     * A textarea input.
     */
    interface HTMLF2TextareaInputElement extends Components.F2TextareaInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLF2TextareaInputElementEventMap>(type: K, listener: (this: HTMLF2TextareaInputElement, ev: F2TextareaInputCustomEvent<HTMLF2TextareaInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLF2TextareaInputElementEventMap>(type: K, listener: (this: HTMLF2TextareaInputElement, ev: F2TextareaInputCustomEvent<HTMLF2TextareaInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLF2TextareaInputElement: {
        prototype: HTMLF2TextareaInputElement;
        new (): HTMLF2TextareaInputElement;
    };
    interface HTMLF2TypeaheadElementEventMap {
        "fieldchange": FieldChange<string[]>;
        "enter": any;
    }
    interface HTMLF2TypeaheadElement extends Components.F2Typeahead, HTMLStencilElement {
        addEventListener<K extends keyof HTMLF2TypeaheadElementEventMap>(type: K, listener: (this: HTMLF2TypeaheadElement, ev: F2TypeaheadCustomEvent<HTMLF2TypeaheadElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLF2TypeaheadElementEventMap>(type: K, listener: (this: HTMLF2TypeaheadElement, ev: F2TypeaheadCustomEvent<HTMLF2TypeaheadElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLF2TypeaheadElement: {
        prototype: HTMLF2TypeaheadElement;
        new (): HTMLF2TypeaheadElement;
    };
    /**
     * Display messages under fields.
     */
    interface HTMLF2ValidationMessagesElement extends Components.F2ValidationMessages, HTMLStencilElement {
    }
    var HTMLF2ValidationMessagesElement: {
        prototype: HTMLF2ValidationMessagesElement;
        new (): HTMLF2ValidationMessagesElement;
    };
    /**
     * masked-text-field demo.
     */
    interface HTMLMaskedTextFieldDemoElement extends Components.MaskedTextFieldDemo, HTMLStencilElement {
    }
    var HTMLMaskedTextFieldDemoElement: {
        prototype: HTMLMaskedTextFieldDemoElement;
        new (): HTMLMaskedTextFieldDemoElement;
    };
    /**
     * masked-text-input demo.
     */
    interface HTMLMaskedTextInputDemoElement extends Components.MaskedTextInputDemo, HTMLStencilElement {
    }
    var HTMLMaskedTextInputDemoElement: {
        prototype: HTMLMaskedTextInputDemoElement;
        new (): HTMLMaskedTextInputDemoElement;
    };
    /**
     * number-field demo.
     */
    interface HTMLNumberFieldDemoElement extends Components.NumberFieldDemo, HTMLStencilElement {
    }
    var HTMLNumberFieldDemoElement: {
        prototype: HTMLNumberFieldDemoElement;
        new (): HTMLNumberFieldDemoElement;
    };
    /**
     * number-input demo.
     */
    interface HTMLNumberInputDemoElement extends Components.NumberInputDemo, HTMLStencilElement {
    }
    var HTMLNumberInputDemoElement: {
        prototype: HTMLNumberInputDemoElement;
        new (): HTMLNumberInputDemoElement;
    };
    /**
     * radio-card-field demo.
     */
    interface HTMLRadioCardFieldDemoElement extends Components.RadioCardFieldDemo, HTMLStencilElement {
    }
    var HTMLRadioCardFieldDemoElement: {
        prototype: HTMLRadioCardFieldDemoElement;
        new (): HTMLRadioCardFieldDemoElement;
    };
    /**
     * radio-card-input demo.
     */
    interface HTMLRadioCardInputDemoElement extends Components.RadioCardInputDemo, HTMLStencilElement {
    }
    var HTMLRadioCardInputDemoElement: {
        prototype: HTMLRadioCardInputDemoElement;
        new (): HTMLRadioCardInputDemoElement;
    };
    /**
     * select-field demo.
     */
    interface HTMLSelectFieldDemoElement extends Components.SelectFieldDemo, HTMLStencilElement {
    }
    var HTMLSelectFieldDemoElement: {
        prototype: HTMLSelectFieldDemoElement;
        new (): HTMLSelectFieldDemoElement;
    };
    /**
     * select-input demo.
     */
    interface HTMLSelectInputDemoElement extends Components.SelectInputDemo, HTMLStencilElement {
    }
    var HTMLSelectInputDemoElement: {
        prototype: HTMLSelectInputDemoElement;
        new (): HTMLSelectInputDemoElement;
    };
    /**
     * select-list-field demo.
     */
    interface HTMLSelectListFieldDemoElement extends Components.SelectListFieldDemo, HTMLStencilElement {
    }
    var HTMLSelectListFieldDemoElement: {
        prototype: HTMLSelectListFieldDemoElement;
        new (): HTMLSelectListFieldDemoElement;
    };
    /**
     * used in the es-select demo.
     */
    interface HTMLSelectOptionDemoElement extends Components.SelectOptionDemo, HTMLStencilElement {
    }
    var HTMLSelectOptionDemoElement: {
        prototype: HTMLSelectOptionDemoElement;
        new (): HTMLSelectOptionDemoElement;
    };
    /**
     * text-field demo.
     */
    interface HTMLTextFieldDemoElement extends Components.TextFieldDemo, HTMLStencilElement {
    }
    var HTMLTextFieldDemoElement: {
        prototype: HTMLTextFieldDemoElement;
        new (): HTMLTextFieldDemoElement;
    };
    /**
     * text-input demo.
     */
    interface HTMLTextInputDemoElement extends Components.TextInputDemo, HTMLStencilElement {
    }
    var HTMLTextInputDemoElement: {
        prototype: HTMLTextInputDemoElement;
        new (): HTMLTextInputDemoElement;
    };
    /**
     * text-list-field demo.
     */
    interface HTMLTextListFieldDemoElement extends Components.TextListFieldDemo, HTMLStencilElement {
    }
    var HTMLTextListFieldDemoElement: {
        prototype: HTMLTextListFieldDemoElement;
        new (): HTMLTextListFieldDemoElement;
    };
    /**
     * textarea-field demo.
     */
    interface HTMLTextareaFieldDemoElement extends Components.TextareaFieldDemo, HTMLStencilElement {
    }
    var HTMLTextareaFieldDemoElement: {
        prototype: HTMLTextareaFieldDemoElement;
        new (): HTMLTextareaFieldDemoElement;
    };
    /**
     * textarea-input demo.
     */
    interface HTMLTextareaInputDemoElement extends Components.TextareaInputDemo, HTMLStencilElement {
    }
    var HTMLTextareaInputDemoElement: {
        prototype: HTMLTextareaInputDemoElement;
        new (): HTMLTextareaInputDemoElement;
    };
    interface HTMLElementTagNameMap {
        "f2-masked-text-field": HTMLF2MaskedTextFieldElement;
        "f2-masked-text-input": HTMLF2MaskedTextInputElement;
        "f2-number-field": HTMLF2NumberFieldElement;
        "f2-number-input": HTMLF2NumberInputElement;
        "f2-radio-card-field": HTMLF2RadioCardFieldElement;
        "f2-radio-card-input": HTMLF2RadioCardInputElement;
        "f2-select-field": HTMLF2SelectFieldElement;
        "f2-select-input": HTMLF2SelectInputElement;
        "f2-select-list-field": HTMLF2SelectListFieldElement;
        "f2-text-field": HTMLF2TextFieldElement;
        "f2-text-input": HTMLF2TextInputElement;
        "f2-text-list-field": HTMLF2TextListFieldElement;
        "f2-textarea-field": HTMLF2TextareaFieldElement;
        "f2-textarea-input": HTMLF2TextareaInputElement;
        "f2-typeahead": HTMLF2TypeaheadElement;
        "f2-validation-messages": HTMLF2ValidationMessagesElement;
        "masked-text-field-demo": HTMLMaskedTextFieldDemoElement;
        "masked-text-input-demo": HTMLMaskedTextInputDemoElement;
        "number-field-demo": HTMLNumberFieldDemoElement;
        "number-input-demo": HTMLNumberInputDemoElement;
        "radio-card-field-demo": HTMLRadioCardFieldDemoElement;
        "radio-card-input-demo": HTMLRadioCardInputDemoElement;
        "select-field-demo": HTMLSelectFieldDemoElement;
        "select-input-demo": HTMLSelectInputDemoElement;
        "select-list-field-demo": HTMLSelectListFieldDemoElement;
        "select-option-demo": HTMLSelectOptionDemoElement;
        "text-field-demo": HTMLTextFieldDemoElement;
        "text-input-demo": HTMLTextInputDemoElement;
        "text-list-field-demo": HTMLTextListFieldDemoElement;
        "textarea-field-demo": HTMLTextareaFieldDemoElement;
        "textarea-input-demo": HTMLTextareaInputDemoElement;
    }
}
declare namespace LocalJSX {
    /**
     * A masked text input.
     */
    interface F2MaskedTextField {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Inline documentation text.
         */
        "documentation"?: string;
        /**
          * Inline documentation link.
         */
        "documentationLink"?: string;
        /**
          * Inline documentation link text.
         */
        "documentationLinkText"?: string;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the field is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the field.
         */
        "label": string;
        /**
          * Apply an input mask
         */
        "mask": MaskOptions;
        /**
          * The messages to display under the field.
         */
        "messages"?: ValidationMessages;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * Emitted on keyup of enter, if no modifier keys are held.
         */
        "onEnter"?: (event: F2MaskedTextFieldCustomEvent<any>) => void;
        /**
          * Emitted when the value of the field is changed.
         */
        "onFieldchange"?: (event: F2MaskedTextFieldCustomEvent<FieldChange<string>>) => void;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A masked text input.
     */
    interface F2MaskedTextInput {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the input is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * Apply an input mask
         */
        "mask": MaskOptions;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * Emitted on keyup of enter, if no modifier keys are held.
         */
        "onEnter"?: (event: F2MaskedTextInputCustomEvent<any>) => void;
        /**
          * Emitted when the value of the field is changed.
         */
        "onFieldchange"?: (event: F2MaskedTextInputCustomEvent<FieldChange<string>>) => void;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A number field.
     */
    interface F2NumberField {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Inline documentation text.
         */
        "documentation"?: string;
        /**
          * Inline documentation link.
         */
        "documentationLink"?: string;
        /**
          * Inline documentation link text.
         */
        "documentationLinkText"?: string;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the field is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the field.
         */
        "label": string;
        /**
          * The messages to display under the field.
         */
        "messages"?: ValidationMessages;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * Emitted when the value of the field is changed.
         */
        "onFieldchange"?: (event: F2NumberFieldCustomEvent<FieldChange<string>>) => void;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * Display a unit beside the input.
         */
        "unit"?: string;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A number based input.
     * Values should be passed around as strings, as numbers can round / floating point / overflow etc if a number type is used.
     */
    interface F2NumberInput {
        /**
          * If the field is disabled.
         */
        "disabled"?: boolean;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the field is currently in an error state.
         */
        "invalid"?: boolean;
        /**
          * The name of the field.
         */
        "name": string;
        /**
          * Emitted on keyup of enter, if no modifier keys are held.
         */
        "onEnter"?: (event: F2NumberInputCustomEvent<any>) => void;
        /**
          * Emitted when the value of the field is changed.
         */
        "onFieldchange"?: (event: F2NumberInputCustomEvent<FieldChange<string>>) => void;
        /**
          * The placeholder for the input.
         */
        "placeholder"?: string;
        /**
          * If the field is editable.
         */
        "readonly"?: boolean;
        /**
          * Display a unit beside the input.
         */
        "unit"?: string;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A card based single select field.
     */
    interface F2RadioCardField {
        /**
          * Parts in the carld, to be exported on the top level.
         */
        "cardParts"?: string[];
        /**
          * Icon to display when checked.
         */
        "checkIcon"?: IconDescription;
        /**
          * If the field is disabled.
         */
        "disabled"?: boolean;
        /**
          * Inline documentation text.
         */
        "documentation"?: string;
        /**
          * Inline documentation link.
         */
        "documentationLink"?: string;
        /**
          * Inline documentation link text.
         */
        "documentationLinkText"?: string;
        /**
          * Group the cards by a key.
         */
        "groupBy"?: string;
        /**
          * If the field is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the field.
         */
        "label": string;
        /**
          * The messages to display under the field.
         */
        "messages"?: ValidationMessages;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * Emitted when the value of the field is changed.
         */
        "onFieldchange"?: (event: F2RadioCardFieldCustomEvent<FieldChange<string | null>>) => void;
        /**
          * The options to be displayed and chosen from.
         */
        "options": RadioCardOption[];
        /**
          * Overwrite the default card renderer
         */
        "renderCard"?: RenderCard<any>;
        /**
          * The current value of the input.
         */
        "value": string | null;
    }
    /**
     * A card based single select input.
     */
    interface F2RadioCardInput {
        /**
          * Icon to display when checked.
         */
        "checkIcon"?: IconDescription;
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Group the cards by a key.
         */
        "groupBy"?: string;
        /**
          * If the input is currently in an error state.
         */
        "invalid"?: boolean;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * Emitted when the value of the field is changed.
         */
        "onFieldchange"?: (event: F2RadioCardInputCustomEvent<FieldChange<string | null>>) => void;
        /**
          * The options to be displayed and chosen from.
         */
        "options": RadioCardOption[];
        /**
          * Overwrite the default card renderer
         */
        "renderCard"?: RenderCard<any>;
        /**
          * The current value of the input.
         */
        "value": string | null;
    }
    /**
     * A text input.
     */
    interface F2SelectField {
        /**
          * Icon to use as a chevron.
         */
        "chevronIcon"?: IconDescription;
        /**
          * If the field is disabled.
         */
        "disabled"?: boolean;
        /**
          * Inline documentation text.
         */
        "documentation"?: string;
        /**
          * Inline documentation link.
         */
        "documentationLink"?: string;
        /**
          * Inline documentation link text.
         */
        "documentationLinkText"?: string;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the field is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the field.
         */
        "label": string;
        /**
          * The messages to display under the field.
         */
        "messages"?: ValidationMessages;
        /**
          * The name of the field.
         */
        "name": string;
        /**
          * Emitted on keyup of enter, if no modifier keys are held.
         */
        "onEnter"?: (event: F2SelectFieldCustomEvent<any>) => void;
        /**
          * Emitted when the value of the field is changed.
         */
        "onFieldchange"?: (event: F2SelectFieldCustomEvent<FieldChange<string>>) => void;
        /**
          * Pass a custom search filter function
         */
        "optionFilter"?: OptionFilter;
        /**
          * A list of options to choose from.
         */
        "options": TypeaheadOption[];
        /**
          * The placeholder for the input.
         */
        "placeholder"?: string;
        /**
          * If the field is editable.
         */
        "readonly"?: boolean;
        /**
          * Overwrite the default option renderer.
         */
        "renderOption"?: RenderTypeaheadOption<any>;
        /**
          * Overwrite the default value renderer.
         */
        "renderValue"?: RenderSelectValue<any>;
        /**
          * The current value of the field.
         */
        "value": string | null;
    }
    /**
     * A searchable select dropdown.
     */
    interface F2SelectInput {
        /**
          * Icon to use as a chevron.
         */
        "chevronIcon"?: IconDescription;
        /**
          * If the field is disabled.
         */
        "disabled"?: boolean;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the field is currently in an error state.
         */
        "invalid"?: boolean;
        /**
          * The name of the field.
         */
        "name": string;
        /**
          * Emitted when the value of the field is changed.
         */
        "onFieldchange"?: (event: F2SelectInputCustomEvent<FieldChange<string | null>>) => void;
        /**
          * Pass a custom search filter function
         */
        "optionFilter"?: OptionFilter;
        /**
          * A list of options to choose from.
         */
        "options": TypeaheadOption[];
        /**
          * The placeholder for the input.
         */
        "placeholder"?: string;
        /**
          * If the field is editable.
         */
        "readonly"?: boolean;
        /**
          * Overwrite the default option renderer.
         */
        "renderOption"?: RenderTypeaheadOption<any>;
        /**
          * Overwrite the default value renderer.
         */
        "renderValue"?: RenderSelectValue<any>;
        /**
          * The current value of the field.
         */
        "value": string | null;
    }
    /**
     * Create a list from a fixed set of values.
     */
    interface F2SelectListField {
        /**
          * The icon to display next to the field
         */
        "addIcon"?: IconDescription;
        /**
          * Icon to use as a chevron.
         */
        "chevronIcon"?: IconDescription;
        /**
          * Icon for the delete button.
         */
        "deleteIcon"?: IconDescription;
        /**
          * If the field is disabled.
         */
        "disabled"?: boolean;
        /**
          * Inline documentation text.
         */
        "documentation"?: string;
        /**
          * Inline documentation link.
         */
        "documentationLink"?: string;
        /**
          * Inline documentation link text.
         */
        "documentationLinkText"?: string;
        /**
          * The icon to display next to the field
         */
        "icon"?: IconDescription;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the field is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the field.
         */
        "label": string;
        /**
          * The messages to display under the field.
         */
        "messages"?: ValidationMessages;
        /**
          * The name of the field.
         */
        "name": string;
        /**
          * Emitted when the value of the field is changed.
         */
        "onFieldchange"?: (event: F2SelectListFieldCustomEvent<FieldChange<string[]>>) => void;
        /**
          * A list of options to choose from.
         */
        "options": TypeaheadOption[];
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * Render the list item.
         */
        "renderItem"?: RenderFunction<[option: TypeaheadOption]>;
        /**
          * The selected item ids
         */
        "value": string[];
    }
    /**
     * A text input.
     */
    interface F2TextField {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Inline documentation text.
         */
        "documentation"?: string;
        /**
          * Inline documentation link.
         */
        "documentationLink"?: string;
        /**
          * Inline documentation link text.
         */
        "documentationLinkText"?: string;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the field is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the field.
         */
        "label": string;
        /**
          * The messages to display under the field.
         */
        "messages"?: ValidationMessages;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * Emitted on keyup of enter, if no modifier keys are held.
         */
        "onEnter"?: (event: F2TextFieldCustomEvent<any>) => void;
        /**
          * Emitted when the value of the field is changed.
         */
        "onFieldchange"?: (event: F2TextFieldCustomEvent<FieldChange<string>>) => void;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A text input.
     */
    interface F2TextInput {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the input is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * Emitted on keyup of enter, if no modifier keys are held.
         */
        "onEnter"?: (event: F2TextInputCustomEvent<any>) => void;
        /**
          * Emitted when the value of the field is changed.
         */
        "onFieldchange"?: (event: F2TextInputCustomEvent<FieldChange<string>>) => void;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A list creator input.
     */
    interface F2TextListField {
        /**
          * Icon for the add item button.
         */
        "additionIcon"?: IconDescription;
        /**
          * Text for the add item button.
         */
        "additionText"?: string;
        /**
          * Icon for the delete button.
         */
        "deleteIcon"?: IconDescription;
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Inline documentation text.
         */
        "documentation"?: string;
        /**
          * Inline documentation link.
         */
        "documentationLink"?: string;
        /**
          * Inline documentation link text.
         */
        "documentationLinkText"?: string;
        /**
          * If the field is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the field.
         */
        "label": string;
        /**
          * The messages to display under the field.
         */
        "messages"?: ValidationMessages;
        /**
          * The name of the field.
         */
        "name": string;
        /**
          * Emitted when the value of the field is changed.
         */
        "onFieldchange"?: (event: F2TextListFieldCustomEvent<FieldChange<string[]>>) => void;
        /**
          * Display a placeholder in the input.
         */
        "placeholder": string;
        /**
          * The currently selected values
         */
        "value": string[];
    }
    /**
     * A textarea field.
     */
    interface F2TextareaField {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Inline documentation text.
         */
        "documentation"?: string;
        /**
          * Inline documentation link.
         */
        "documentationLink"?: string;
        /**
          * Inline documentation link text.
         */
        "documentationLinkText"?: string;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the field is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the field.
         */
        "label": string;
        /**
          * The messages to display under the field.
         */
        "messages"?: ValidationMessages;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * Emitted when the value of the field is changed.
         */
        "onFieldchange"?: (event: F2TextareaFieldCustomEvent<FieldChange<string>>) => void;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A textarea input.
     */
    interface F2TextareaInput {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the input is currently in an error state.
         */
        "invalid"?: boolean;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * Emitted when the value of the field is changed.
         */
        "onFieldchange"?: (event: F2TextareaInputCustomEvent<FieldChange<string>>) => void;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * The current value of the input.
         */
        "value": string;
    }
    interface F2Typeahead {
        "clearOnSelect"?: boolean;
        "closeOnSelect"?: boolean;
        "disabled"?: boolean;
        "name": string;
        "onEnter"?: (event: F2TypeaheadCustomEvent<any>) => void;
        "onFieldchange"?: (event: F2TypeaheadCustomEvent<FieldChange<string[]>>) => void;
        "optionFilter"?: OptionFilter1;
        "options": TypeaheadOption1[];
        "readonly"?: boolean;
        "renderInput": RenderTypeaheadInput;
        "renderOption"?: RenderTypeaheadOption1;
        "value": string[];
    }
    /**
     * Display messages under fields.
     */
    interface F2ValidationMessages {
        /**
          * Icon to diplay next to errors. (if `showIcons` or high contrast)
         */
        "errorIcon"?: IconDescription;
        /**
          * Icon to diplay next to infos. (if `showIcons` or high contrast)
         */
        "infoIcon"?: IconDescription;
        /**
          * The messages to display.
         */
        "messages"?: ValidationMessages;
        /**
          * Icon to diplay next to warnings. (if `showIcons` or high contrast)
         */
        "warningIcon"?: IconDescription;
    }
    /**
     * masked-text-field demo.
     */
    interface MaskedTextFieldDemo {
    }
    /**
     * masked-text-input demo.
     */
    interface MaskedTextInputDemo {
    }
    /**
     * number-field demo.
     */
    interface NumberFieldDemo {
    }
    /**
     * number-input demo.
     */
    interface NumberInputDemo {
    }
    /**
     * radio-card-field demo.
     */
    interface RadioCardFieldDemo {
    }
    /**
     * radio-card-input demo.
     */
    interface RadioCardInputDemo {
    }
    /**
     * select-field demo.
     */
    interface SelectFieldDemo {
    }
    /**
     * select-input demo.
     */
    interface SelectInputDemo {
    }
    /**
     * select-list-field demo.
     */
    interface SelectListFieldDemo {
    }
    /**
     * used in the es-select demo.
     */
    interface SelectOptionDemo {
        "name"?: string;
        "value"?: string;
    }
    /**
     * text-field demo.
     */
    interface TextFieldDemo {
    }
    /**
     * text-input demo.
     */
    interface TextInputDemo {
    }
    /**
     * text-list-field demo.
     */
    interface TextListFieldDemo {
    }
    /**
     * textarea-field demo.
     */
    interface TextareaFieldDemo {
    }
    /**
     * textarea-input demo.
     */
    interface TextareaInputDemo {
    }
    interface IntrinsicElements {
        "f2-masked-text-field": F2MaskedTextField;
        "f2-masked-text-input": F2MaskedTextInput;
        "f2-number-field": F2NumberField;
        "f2-number-input": F2NumberInput;
        "f2-radio-card-field": F2RadioCardField;
        "f2-radio-card-input": F2RadioCardInput;
        "f2-select-field": F2SelectField;
        "f2-select-input": F2SelectInput;
        "f2-select-list-field": F2SelectListField;
        "f2-text-field": F2TextField;
        "f2-text-input": F2TextInput;
        "f2-text-list-field": F2TextListField;
        "f2-textarea-field": F2TextareaField;
        "f2-textarea-input": F2TextareaInput;
        "f2-typeahead": F2Typeahead;
        "f2-validation-messages": F2ValidationMessages;
        "masked-text-field-demo": MaskedTextFieldDemo;
        "masked-text-input-demo": MaskedTextInputDemo;
        "number-field-demo": NumberFieldDemo;
        "number-input-demo": NumberInputDemo;
        "radio-card-field-demo": RadioCardFieldDemo;
        "radio-card-input-demo": RadioCardInputDemo;
        "select-field-demo": SelectFieldDemo;
        "select-input-demo": SelectInputDemo;
        "select-list-field-demo": SelectListFieldDemo;
        "select-option-demo": SelectOptionDemo;
        "text-field-demo": TextFieldDemo;
        "text-input-demo": TextInputDemo;
        "text-list-field-demo": TextListFieldDemo;
        "textarea-field-demo": TextareaFieldDemo;
        "textarea-input-demo": TextareaInputDemo;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * A masked text input.
             */
            "f2-masked-text-field": LocalJSX.F2MaskedTextField & JSXBase.HTMLAttributes<HTMLF2MaskedTextFieldElement>;
            /**
             * A masked text input.
             */
            "f2-masked-text-input": LocalJSX.F2MaskedTextInput & JSXBase.HTMLAttributes<HTMLF2MaskedTextInputElement>;
            /**
             * A number field.
             */
            "f2-number-field": LocalJSX.F2NumberField & JSXBase.HTMLAttributes<HTMLF2NumberFieldElement>;
            /**
             * A number based input.
             * Values should be passed around as strings, as numbers can round / floating point / overflow etc if a number type is used.
             */
            "f2-number-input": LocalJSX.F2NumberInput & JSXBase.HTMLAttributes<HTMLF2NumberInputElement>;
            /**
             * A card based single select field.
             */
            "f2-radio-card-field": LocalJSX.F2RadioCardField & JSXBase.HTMLAttributes<HTMLF2RadioCardFieldElement>;
            /**
             * A card based single select input.
             */
            "f2-radio-card-input": LocalJSX.F2RadioCardInput & JSXBase.HTMLAttributes<HTMLF2RadioCardInputElement>;
            /**
             * A text input.
             */
            "f2-select-field": LocalJSX.F2SelectField & JSXBase.HTMLAttributes<HTMLF2SelectFieldElement>;
            /**
             * A searchable select dropdown.
             */
            "f2-select-input": LocalJSX.F2SelectInput & JSXBase.HTMLAttributes<HTMLF2SelectInputElement>;
            /**
             * Create a list from a fixed set of values.
             */
            "f2-select-list-field": LocalJSX.F2SelectListField & JSXBase.HTMLAttributes<HTMLF2SelectListFieldElement>;
            /**
             * A text input.
             */
            "f2-text-field": LocalJSX.F2TextField & JSXBase.HTMLAttributes<HTMLF2TextFieldElement>;
            /**
             * A text input.
             */
            "f2-text-input": LocalJSX.F2TextInput & JSXBase.HTMLAttributes<HTMLF2TextInputElement>;
            /**
             * A list creator input.
             */
            "f2-text-list-field": LocalJSX.F2TextListField & JSXBase.HTMLAttributes<HTMLF2TextListFieldElement>;
            /**
             * A textarea field.
             */
            "f2-textarea-field": LocalJSX.F2TextareaField & JSXBase.HTMLAttributes<HTMLF2TextareaFieldElement>;
            /**
             * A textarea input.
             */
            "f2-textarea-input": LocalJSX.F2TextareaInput & JSXBase.HTMLAttributes<HTMLF2TextareaInputElement>;
            "f2-typeahead": LocalJSX.F2Typeahead & JSXBase.HTMLAttributes<HTMLF2TypeaheadElement>;
            /**
             * Display messages under fields.
             */
            "f2-validation-messages": LocalJSX.F2ValidationMessages & JSXBase.HTMLAttributes<HTMLF2ValidationMessagesElement>;
            /**
             * masked-text-field demo.
             */
            "masked-text-field-demo": LocalJSX.MaskedTextFieldDemo & JSXBase.HTMLAttributes<HTMLMaskedTextFieldDemoElement>;
            /**
             * masked-text-input demo.
             */
            "masked-text-input-demo": LocalJSX.MaskedTextInputDemo & JSXBase.HTMLAttributes<HTMLMaskedTextInputDemoElement>;
            /**
             * number-field demo.
             */
            "number-field-demo": LocalJSX.NumberFieldDemo & JSXBase.HTMLAttributes<HTMLNumberFieldDemoElement>;
            /**
             * number-input demo.
             */
            "number-input-demo": LocalJSX.NumberInputDemo & JSXBase.HTMLAttributes<HTMLNumberInputDemoElement>;
            /**
             * radio-card-field demo.
             */
            "radio-card-field-demo": LocalJSX.RadioCardFieldDemo & JSXBase.HTMLAttributes<HTMLRadioCardFieldDemoElement>;
            /**
             * radio-card-input demo.
             */
            "radio-card-input-demo": LocalJSX.RadioCardInputDemo & JSXBase.HTMLAttributes<HTMLRadioCardInputDemoElement>;
            /**
             * select-field demo.
             */
            "select-field-demo": LocalJSX.SelectFieldDemo & JSXBase.HTMLAttributes<HTMLSelectFieldDemoElement>;
            /**
             * select-input demo.
             */
            "select-input-demo": LocalJSX.SelectInputDemo & JSXBase.HTMLAttributes<HTMLSelectInputDemoElement>;
            /**
             * select-list-field demo.
             */
            "select-list-field-demo": LocalJSX.SelectListFieldDemo & JSXBase.HTMLAttributes<HTMLSelectListFieldDemoElement>;
            /**
             * used in the es-select demo.
             */
            "select-option-demo": LocalJSX.SelectOptionDemo & JSXBase.HTMLAttributes<HTMLSelectOptionDemoElement>;
            /**
             * text-field demo.
             */
            "text-field-demo": LocalJSX.TextFieldDemo & JSXBase.HTMLAttributes<HTMLTextFieldDemoElement>;
            /**
             * text-input demo.
             */
            "text-input-demo": LocalJSX.TextInputDemo & JSXBase.HTMLAttributes<HTMLTextInputDemoElement>;
            /**
             * text-list-field demo.
             */
            "text-list-field-demo": LocalJSX.TextListFieldDemo & JSXBase.HTMLAttributes<HTMLTextListFieldDemoElement>;
            /**
             * textarea-field demo.
             */
            "textarea-field-demo": LocalJSX.TextareaFieldDemo & JSXBase.HTMLAttributes<HTMLTextareaFieldDemoElement>;
            /**
             * textarea-input demo.
             */
            "textarea-input-demo": LocalJSX.TextareaInputDemo & JSXBase.HTMLAttributes<HTMLTextareaInputDemoElement>;
        }
    }
}
