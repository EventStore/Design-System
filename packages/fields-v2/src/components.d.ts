/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { FieldChange, ValidationMessages } from "./types";
import { MaskOptions } from "./components/text/masked-text-input/types";
import { IconDescription } from "@eventstore-ui/components";
export { FieldChange, ValidationMessages } from "./types";
export { MaskOptions } from "./components/text/masked-text-input/types";
export { IconDescription } from "@eventstore-ui/components";
export namespace Components {
    /**
     * A masked text input.
     */
    interface F2MaskedTextField {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Inline documentation text.
         */
        "documentation"?: string;
        /**
          * Inline documentation link.
         */
        "documentationLink"?: string;
        /**
          * Inline documentation link text.
         */
        "documentationLinkText"?: string;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the field is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the field.
         */
        "label": string;
        /**
          * Apply an input mask
         */
        "mask": MaskOptions;
        /**
          * The messages to display under the field.
         */
        "messages"?: ValidationMessages;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A masked text input.
     */
    interface F2MaskedTextInput {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the input is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * Apply an input mask
         */
        "mask": MaskOptions;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A text input.
     */
    interface F2TextField {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Inline documentation text.
         */
        "documentation"?: string;
        /**
          * Inline documentation link.
         */
        "documentationLink"?: string;
        /**
          * Inline documentation link text.
         */
        "documentationLinkText"?: string;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the field is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the field.
         */
        "label": string;
        /**
          * The messages to display under the field.
         */
        "messages"?: ValidationMessages;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A text input.
     */
    interface F2TextInput {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the input is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * Display messages under fields.
     */
    interface F2ValidationMessages {
        /**
          * Icon to diplay next to errors. (if `showIcons` or high contrast)
         */
        "errorIcon": IconDescription;
        /**
          * Icon to diplay next to infos. (if `showIcons` or high contrast)
         */
        "infoIcon": IconDescription;
        /**
          * The messages to display.
         */
        "messages"?: ValidationMessages;
        /**
          * Icon to diplay next to warnings. (if `showIcons` or high contrast)
         */
        "warningIcon": IconDescription;
    }
    /**
     * masked-text-field demo.
     */
    interface MaskedTextFieldDemo {
    }
    /**
     * masked-text-input demo.
     */
    interface MaskedTextInputDemo {
    }
    /**
     * text-field demo.
     */
    interface TextFieldDemo {
    }
    /**
     * text-input demo.
     */
    interface TextInputDemo {
    }
}
export interface F2MaskedTextFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLF2MaskedTextFieldElement;
}
export interface F2MaskedTextInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLF2MaskedTextInputElement;
}
export interface F2TextFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLF2TextFieldElement;
}
export interface F2TextInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLF2TextInputElement;
}
declare global {
    interface HTMLF2MaskedTextFieldElementEventMap {
        "fieldchange": FieldChange<string>;
        "enter": any;
    }
    /**
     * A masked text input.
     */
    interface HTMLF2MaskedTextFieldElement extends Components.F2MaskedTextField, HTMLStencilElement {
        addEventListener<K extends keyof HTMLF2MaskedTextFieldElementEventMap>(type: K, listener: (this: HTMLF2MaskedTextFieldElement, ev: F2MaskedTextFieldCustomEvent<HTMLF2MaskedTextFieldElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLF2MaskedTextFieldElementEventMap>(type: K, listener: (this: HTMLF2MaskedTextFieldElement, ev: F2MaskedTextFieldCustomEvent<HTMLF2MaskedTextFieldElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLF2MaskedTextFieldElement: {
        prototype: HTMLF2MaskedTextFieldElement;
        new (): HTMLF2MaskedTextFieldElement;
    };
    interface HTMLF2MaskedTextInputElementEventMap {
        "fieldchange": FieldChange<string>;
        "enter": any;
    }
    /**
     * A masked text input.
     */
    interface HTMLF2MaskedTextInputElement extends Components.F2MaskedTextInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLF2MaskedTextInputElementEventMap>(type: K, listener: (this: HTMLF2MaskedTextInputElement, ev: F2MaskedTextInputCustomEvent<HTMLF2MaskedTextInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLF2MaskedTextInputElementEventMap>(type: K, listener: (this: HTMLF2MaskedTextInputElement, ev: F2MaskedTextInputCustomEvent<HTMLF2MaskedTextInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLF2MaskedTextInputElement: {
        prototype: HTMLF2MaskedTextInputElement;
        new (): HTMLF2MaskedTextInputElement;
    };
    interface HTMLF2TextFieldElementEventMap {
        "fieldchange": FieldChange<string>;
        "enter": any;
    }
    /**
     * A text input.
     */
    interface HTMLF2TextFieldElement extends Components.F2TextField, HTMLStencilElement {
        addEventListener<K extends keyof HTMLF2TextFieldElementEventMap>(type: K, listener: (this: HTMLF2TextFieldElement, ev: F2TextFieldCustomEvent<HTMLF2TextFieldElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLF2TextFieldElementEventMap>(type: K, listener: (this: HTMLF2TextFieldElement, ev: F2TextFieldCustomEvent<HTMLF2TextFieldElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLF2TextFieldElement: {
        prototype: HTMLF2TextFieldElement;
        new (): HTMLF2TextFieldElement;
    };
    interface HTMLF2TextInputElementEventMap {
        "fieldchange": FieldChange<string>;
        "enter": any;
    }
    /**
     * A text input.
     */
    interface HTMLF2TextInputElement extends Components.F2TextInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLF2TextInputElementEventMap>(type: K, listener: (this: HTMLF2TextInputElement, ev: F2TextInputCustomEvent<HTMLF2TextInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLF2TextInputElementEventMap>(type: K, listener: (this: HTMLF2TextInputElement, ev: F2TextInputCustomEvent<HTMLF2TextInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLF2TextInputElement: {
        prototype: HTMLF2TextInputElement;
        new (): HTMLF2TextInputElement;
    };
    /**
     * Display messages under fields.
     */
    interface HTMLF2ValidationMessagesElement extends Components.F2ValidationMessages, HTMLStencilElement {
    }
    var HTMLF2ValidationMessagesElement: {
        prototype: HTMLF2ValidationMessagesElement;
        new (): HTMLF2ValidationMessagesElement;
    };
    /**
     * masked-text-field demo.
     */
    interface HTMLMaskedTextFieldDemoElement extends Components.MaskedTextFieldDemo, HTMLStencilElement {
    }
    var HTMLMaskedTextFieldDemoElement: {
        prototype: HTMLMaskedTextFieldDemoElement;
        new (): HTMLMaskedTextFieldDemoElement;
    };
    /**
     * masked-text-input demo.
     */
    interface HTMLMaskedTextInputDemoElement extends Components.MaskedTextInputDemo, HTMLStencilElement {
    }
    var HTMLMaskedTextInputDemoElement: {
        prototype: HTMLMaskedTextInputDemoElement;
        new (): HTMLMaskedTextInputDemoElement;
    };
    /**
     * text-field demo.
     */
    interface HTMLTextFieldDemoElement extends Components.TextFieldDemo, HTMLStencilElement {
    }
    var HTMLTextFieldDemoElement: {
        prototype: HTMLTextFieldDemoElement;
        new (): HTMLTextFieldDemoElement;
    };
    /**
     * text-input demo.
     */
    interface HTMLTextInputDemoElement extends Components.TextInputDemo, HTMLStencilElement {
    }
    var HTMLTextInputDemoElement: {
        prototype: HTMLTextInputDemoElement;
        new (): HTMLTextInputDemoElement;
    };
    interface HTMLElementTagNameMap {
        "f2-masked-text-field": HTMLF2MaskedTextFieldElement;
        "f2-masked-text-input": HTMLF2MaskedTextInputElement;
        "f2-text-field": HTMLF2TextFieldElement;
        "f2-text-input": HTMLF2TextInputElement;
        "f2-validation-messages": HTMLF2ValidationMessagesElement;
        "masked-text-field-demo": HTMLMaskedTextFieldDemoElement;
        "masked-text-input-demo": HTMLMaskedTextInputDemoElement;
        "text-field-demo": HTMLTextFieldDemoElement;
        "text-input-demo": HTMLTextInputDemoElement;
    }
}
declare namespace LocalJSX {
    /**
     * A masked text input.
     */
    interface F2MaskedTextField {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Inline documentation text.
         */
        "documentation"?: string;
        /**
          * Inline documentation link.
         */
        "documentationLink"?: string;
        /**
          * Inline documentation link text.
         */
        "documentationLinkText"?: string;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the field is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the field.
         */
        "label": string;
        /**
          * Apply an input mask
         */
        "mask": MaskOptions;
        /**
          * The messages to display under the field.
         */
        "messages"?: ValidationMessages;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * Emitted on keyup of enter, if no modifier keys are held.
         */
        "onEnter"?: (event: F2MaskedTextFieldCustomEvent<any>) => void;
        /**
          * Emitted when the value of the field is changed.
         */
        "onFieldchange"?: (event: F2MaskedTextFieldCustomEvent<FieldChange<string>>) => void;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A masked text input.
     */
    interface F2MaskedTextInput {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the input is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * Apply an input mask
         */
        "mask": MaskOptions;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * Emitted on keyup of enter, if no modifier keys are held.
         */
        "onEnter"?: (event: F2MaskedTextInputCustomEvent<any>) => void;
        /**
          * Emitted when the value of the field is changed.
         */
        "onFieldchange"?: (event: F2MaskedTextInputCustomEvent<FieldChange<string>>) => void;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A text input.
     */
    interface F2TextField {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Inline documentation text.
         */
        "documentation"?: string;
        /**
          * Inline documentation link.
         */
        "documentationLink"?: string;
        /**
          * Inline documentation link text.
         */
        "documentationLinkText"?: string;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the field is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the field.
         */
        "label": string;
        /**
          * The messages to display under the field.
         */
        "messages"?: ValidationMessages;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * Emitted on keyup of enter, if no modifier keys are held.
         */
        "onEnter"?: (event: F2TextFieldCustomEvent<any>) => void;
        /**
          * Emitted when the value of the field is changed.
         */
        "onFieldchange"?: (event: F2TextFieldCustomEvent<FieldChange<string>>) => void;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * A text input.
     */
    interface F2TextInput {
        /**
          * If the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Pass props directly to the input.
         */
        "inputProps"?: Record<string, any>;
        /**
          * If the input is currently invalid.
         */
        "invalid"?: boolean;
        /**
          * The name of the input.
         */
        "name": string;
        /**
          * Emitted on keyup of enter, if no modifier keys are held.
         */
        "onEnter"?: (event: F2TextInputCustomEvent<any>) => void;
        /**
          * Emitted when the value of the field is changed.
         */
        "onFieldchange"?: (event: F2TextInputCustomEvent<FieldChange<string>>) => void;
        /**
          * The placeholder for the input.
         */
        "placeholder": string;
        /**
          * If the input is editable.
         */
        "readonly"?: boolean;
        /**
          * The current value of the field.
         */
        "value": string;
    }
    /**
     * Display messages under fields.
     */
    interface F2ValidationMessages {
        /**
          * Icon to diplay next to errors. (if `showIcons` or high contrast)
         */
        "errorIcon"?: IconDescription;
        /**
          * Icon to diplay next to infos. (if `showIcons` or high contrast)
         */
        "infoIcon"?: IconDescription;
        /**
          * The messages to display.
         */
        "messages"?: ValidationMessages;
        /**
          * Icon to diplay next to warnings. (if `showIcons` or high contrast)
         */
        "warningIcon"?: IconDescription;
    }
    /**
     * masked-text-field demo.
     */
    interface MaskedTextFieldDemo {
    }
    /**
     * masked-text-input demo.
     */
    interface MaskedTextInputDemo {
    }
    /**
     * text-field demo.
     */
    interface TextFieldDemo {
    }
    /**
     * text-input demo.
     */
    interface TextInputDemo {
    }
    interface IntrinsicElements {
        "f2-masked-text-field": F2MaskedTextField;
        "f2-masked-text-input": F2MaskedTextInput;
        "f2-text-field": F2TextField;
        "f2-text-input": F2TextInput;
        "f2-validation-messages": F2ValidationMessages;
        "masked-text-field-demo": MaskedTextFieldDemo;
        "masked-text-input-demo": MaskedTextInputDemo;
        "text-field-demo": TextFieldDemo;
        "text-input-demo": TextInputDemo;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * A masked text input.
             */
            "f2-masked-text-field": LocalJSX.F2MaskedTextField & JSXBase.HTMLAttributes<HTMLF2MaskedTextFieldElement>;
            /**
             * A masked text input.
             */
            "f2-masked-text-input": LocalJSX.F2MaskedTextInput & JSXBase.HTMLAttributes<HTMLF2MaskedTextInputElement>;
            /**
             * A text input.
             */
            "f2-text-field": LocalJSX.F2TextField & JSXBase.HTMLAttributes<HTMLF2TextFieldElement>;
            /**
             * A text input.
             */
            "f2-text-input": LocalJSX.F2TextInput & JSXBase.HTMLAttributes<HTMLF2TextInputElement>;
            /**
             * Display messages under fields.
             */
            "f2-validation-messages": LocalJSX.F2ValidationMessages & JSXBase.HTMLAttributes<HTMLF2ValidationMessagesElement>;
            /**
             * masked-text-field demo.
             */
            "masked-text-field-demo": LocalJSX.MaskedTextFieldDemo & JSXBase.HTMLAttributes<HTMLMaskedTextFieldDemoElement>;
            /**
             * masked-text-input demo.
             */
            "masked-text-input-demo": LocalJSX.MaskedTextInputDemo & JSXBase.HTMLAttributes<HTMLMaskedTextInputDemoElement>;
            /**
             * text-field demo.
             */
            "text-field-demo": LocalJSX.TextFieldDemo & JSXBase.HTMLAttributes<HTMLTextFieldDemoElement>;
            /**
             * text-input demo.
             */
            "text-input-demo": LocalJSX.TextInputDemo & JSXBase.HTMLAttributes<HTMLTextInputDemoElement>;
        }
    }
}
