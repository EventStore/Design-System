/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Crumb } from "./components/es-breadcrumb/types";
import { DisplayErrorVariant } from "./components/es-display-error/types";
import { HeaderDropdownButtonVariant } from "./components/es-header-dropdown/types";
import { IconDescription } from "@eventstore-ui/components";
import { LoadingBarStatus } from "./components/es-loading-bar/types";
import { NavNode, NavTree } from "./components/es-nav/types";
export { Crumb } from "./components/es-breadcrumb/types";
export { DisplayErrorVariant } from "./components/es-display-error/types";
export { HeaderDropdownButtonVariant } from "./components/es-header-dropdown/types";
export { IconDescription } from "@eventstore-ui/components";
export { LoadingBarStatus } from "./components/es-loading-bar/types";
export { NavNode, NavTree } from "./components/es-nav/types";
export namespace Components {
    /**
     * A list of breadcrumbs to the current page
     */
    interface EsBreadcrumb {
        /**
          * The breadcrumbs to the current page.
         */
        "crumbs": Crumb[];
        /**
          * Do not warn if the crumbs do not match the current router location. (Only warns in dev mode)
         */
        "noValidate": boolean;
    }
    /**
     * Display an error to the user, with title and detail. Will automatically extract from HTTPError.
     */
    interface EsDisplayError {
        /**
          * The unrecoverable error. For a normal error, error.message will be displayed. For a `HTTPError` from `@eventstore-ui/utils` the details title and description will be shown.
         */
        "error": unknown;
        /**
          * Which styling variant to use.
         */
        "variant": DisplayErrorVariant;
    }
    /**
     * A site header for applications.
     */
    interface EsHeader {
    }
    /**
     * A dropdown for the header.
     */
    interface EsHeaderDropdown {
        /**
          * Display a dot on the icon, to attract attention to the button.
         */
        "alertLevel"?: HTMLEsBadgeElement['color'];
        /**
          * text for use in the button.
         */
        "buttonText"?: string;
        /**
          * If a caret should be rendered.
         */
        "caret": boolean;
        /**
          * Display a counter in place of the icon.
         */
        "count"?: number;
        /**
          * If the button should be disabled.
         */
        "disabled": boolean;
        /**
          * Icon for use in the button.
         */
        "icon"?: IconDescription;
        /**
          * Apply an indent to the left of the button, for basic nesting.
         */
        "level"?: number;
        /**
          * Which styling variant to use.
         */
        "variant": HeaderDropdownButtonVariant;
    }
    /**
     * A button for the sidebar, sidebar-dropdown, and header-dropdown.
     */
    interface EsLayoutButton {
        /**
          * If the button should display as active
         */
        "active": boolean;
        /**
          * Display a dot on the icon, to attract attention to the button.
         */
        "alertLevel"?: HTMLEsBadgeElement['color'];
        /**
          * If the parent popup should close when clicked.
         */
        "closeOnClick": boolean;
        /**
          * Display a counter in place of the icon.
         */
        "count"?: number;
        /**
          * If the button should be disabled.
         */
        "disabled": boolean;
        /**
          * Display an icon on the left.
         */
        "icon"?: IconDescription;
        /**
          * If the button is currently active
         */
        "isActive": () => Promise<boolean>;
        /**
          * Apply an indent to the left of the button, for basic nesting.
         */
        "level"?: number;
        /**
          * When deciding the active child, if multiple are active, the highest priority wins.
         */
        "priority": number;
    }
    /**
     * A link for the sidebar, sidebar-dropdown, and header-dropdown.
     */
    interface EsLayoutLink {
        /**
          * Display a dot on the icon, to attract attention to the link.
         */
        "alertLevel"?: HTMLEsBadgeElement['color'];
        /**
          * Display a counter in place of the icon.
         */
        "count"?: number;
        /**
          * If the link should be disabled.
         */
        "disabled": boolean;
        /**
          * If the link is external
         */
        "external"?: boolean;
        /**
          * If the Link should break out of the router, and force a page load
         */
        "forceRefresh"?: boolean;
        /**
          * Display an icon on the left.
         */
        "icon"?: IconDescription;
        /**
          * If the link is currently active
         */
        "isActive": () => Promise<boolean>;
        /**
          * Apply an indent to the left of the link, for basic nesting.
         */
        "level"?: number;
        /**
          * Use exact url matching for active.
         */
        "matchExact"?: boolean;
        /**
          * Use strict url matching for active.
         */
        "matchStrict"?: boolean;
        /**
          * When to display as active. Uses the `url` by default.
         */
        "matchUrl"?: string;
        /**
          * When deciding the active child, if multiple are active, the highest priority wins.
         */
        "priority": number;
        /**
          * Target for link (eg: target="_blank")
         */
        "target"?: string;
        /**
          * Where to link to.
         */
        "url"?: string;
    }
    /**
     * A section with an optional title for containing layout-links
     */
    interface EsLayoutSection {
        /**
          * If the section is collapsable
         */
        "collapsable": boolean;
        /**
          * If the section should be collapsed by default
         */
        "defaultCollapsed": boolean;
        /**
          * Optionally renders a title
         */
        "sectionTitle"?: string;
    }
    /**
     * An animated loading bar, with coloured states.
     * The bar can be externally controlled via the `setProgress` util.
     * Add a bar named `page` for automatic control from `Page`.
     */
    interface EsLoadingBar {
        /**
          * The bar's name, for use in `setProgress`
         */
        "name": string;
        /**
          * Set (and animate to) a progress.
         */
        "progress": (completion: number, status?: LoadingBarStatus) => Promise<void>;
    }
    /**
     * The Event Store logo.
     */
    interface EsLogo {
        /**
          * Height to constrain by.
         */
        "height": number;
        /**
          * Width to constrain by.
         */
        "width": number;
    }
    /**
     * Constructs a navigation from a NavTree.
     */
    interface EsNav {
        /**
          * The `NavTree` data structure that the navigation menu will be built from..
         */
        "navTree": NavTree;
    }
    interface EsNavNode0 {
        "active": boolean;
        "node": NavNode;
        "toggleRequest": () => void;
    }
    interface EsNavNode1 {
        "active": boolean;
        "node": NavNode;
        "toggleRequest": () => void;
    }
    interface EsNavNode2 {
        "node": NavNode;
    }
    /**
     * Standard page title
     */
    interface EsPageTitle {
    }
    /**
     * A panel. Automatically sets `--layout-panel-height` based on it's height, and when resized.
     */
    interface EsPanel {
    }
    /**
     * A header for `es-panel`.
     */
    interface EsPanelHeader {
    }
    /**
     * A sidebar. Automatically sets `--layout-sidebar-width` based on it's own width.
     */
    interface EsSidebar {
    }
    /**
     * A dropdown for the sidebar. Will automatically take the title and icon of the first active nested `es-layout-link` or `es-layout-button`.
     */
    interface EsSidebarDropdown {
        /**
          * The icon to display if no nested es-layout-link or es-layout-button is active
         */
        "defaultIcon": IconDescription;
        /**
          * The title to display if no nested es-layout-link or es-layout-button is active
         */
        "defaultTitle": string;
    }
    /**
     * A theme picker dropdown for the header
     */
    interface EsThemeDropdown {
        /**
          * Which styling variant to use.
         */
        "variant": HeaderDropdownButtonVariant;
    }
    interface EsThemePicker {
    }
    /**
     * Placed in the toolbar area of the layout. Automatically sets `--layout-toolbar-width` based on it's own width.
     */
    interface EsToolbar {
    }
}
export interface EsLayoutButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLEsLayoutButtonElement;
}
declare global {
    /**
     * A list of breadcrumbs to the current page
     */
    interface HTMLEsBreadcrumbElement extends Components.EsBreadcrumb, HTMLStencilElement {
    }
    var HTMLEsBreadcrumbElement: {
        prototype: HTMLEsBreadcrumbElement;
        new (): HTMLEsBreadcrumbElement;
    };
    /**
     * Display an error to the user, with title and detail. Will automatically extract from HTTPError.
     */
    interface HTMLEsDisplayErrorElement extends Components.EsDisplayError, HTMLStencilElement {
    }
    var HTMLEsDisplayErrorElement: {
        prototype: HTMLEsDisplayErrorElement;
        new (): HTMLEsDisplayErrorElement;
    };
    /**
     * A site header for applications.
     */
    interface HTMLEsHeaderElement extends Components.EsHeader, HTMLStencilElement {
    }
    var HTMLEsHeaderElement: {
        prototype: HTMLEsHeaderElement;
        new (): HTMLEsHeaderElement;
    };
    /**
     * A dropdown for the header.
     */
    interface HTMLEsHeaderDropdownElement extends Components.EsHeaderDropdown, HTMLStencilElement {
    }
    var HTMLEsHeaderDropdownElement: {
        prototype: HTMLEsHeaderDropdownElement;
        new (): HTMLEsHeaderDropdownElement;
    };
    /**
     * A button for the sidebar, sidebar-dropdown, and header-dropdown.
     */
    interface HTMLEsLayoutButtonElement extends Components.EsLayoutButton, HTMLStencilElement {
    }
    var HTMLEsLayoutButtonElement: {
        prototype: HTMLEsLayoutButtonElement;
        new (): HTMLEsLayoutButtonElement;
    };
    /**
     * A link for the sidebar, sidebar-dropdown, and header-dropdown.
     */
    interface HTMLEsLayoutLinkElement extends Components.EsLayoutLink, HTMLStencilElement {
    }
    var HTMLEsLayoutLinkElement: {
        prototype: HTMLEsLayoutLinkElement;
        new (): HTMLEsLayoutLinkElement;
    };
    /**
     * A section with an optional title for containing layout-links
     */
    interface HTMLEsLayoutSectionElement extends Components.EsLayoutSection, HTMLStencilElement {
    }
    var HTMLEsLayoutSectionElement: {
        prototype: HTMLEsLayoutSectionElement;
        new (): HTMLEsLayoutSectionElement;
    };
    /**
     * An animated loading bar, with coloured states.
     * The bar can be externally controlled via the `setProgress` util.
     * Add a bar named `page` for automatic control from `Page`.
     */
    interface HTMLEsLoadingBarElement extends Components.EsLoadingBar, HTMLStencilElement {
    }
    var HTMLEsLoadingBarElement: {
        prototype: HTMLEsLoadingBarElement;
        new (): HTMLEsLoadingBarElement;
    };
    /**
     * The Event Store logo.
     */
    interface HTMLEsLogoElement extends Components.EsLogo, HTMLStencilElement {
    }
    var HTMLEsLogoElement: {
        prototype: HTMLEsLogoElement;
        new (): HTMLEsLogoElement;
    };
    /**
     * Constructs a navigation from a NavTree.
     */
    interface HTMLEsNavElement extends Components.EsNav, HTMLStencilElement {
    }
    var HTMLEsNavElement: {
        prototype: HTMLEsNavElement;
        new (): HTMLEsNavElement;
    };
    interface HTMLEsNavNode0Element extends Components.EsNavNode0, HTMLStencilElement {
    }
    var HTMLEsNavNode0Element: {
        prototype: HTMLEsNavNode0Element;
        new (): HTMLEsNavNode0Element;
    };
    interface HTMLEsNavNode1Element extends Components.EsNavNode1, HTMLStencilElement {
    }
    var HTMLEsNavNode1Element: {
        prototype: HTMLEsNavNode1Element;
        new (): HTMLEsNavNode1Element;
    };
    interface HTMLEsNavNode2Element extends Components.EsNavNode2, HTMLStencilElement {
    }
    var HTMLEsNavNode2Element: {
        prototype: HTMLEsNavNode2Element;
        new (): HTMLEsNavNode2Element;
    };
    /**
     * Standard page title
     */
    interface HTMLEsPageTitleElement extends Components.EsPageTitle, HTMLStencilElement {
    }
    var HTMLEsPageTitleElement: {
        prototype: HTMLEsPageTitleElement;
        new (): HTMLEsPageTitleElement;
    };
    /**
     * A panel. Automatically sets `--layout-panel-height` based on it's height, and when resized.
     */
    interface HTMLEsPanelElement extends Components.EsPanel, HTMLStencilElement {
    }
    var HTMLEsPanelElement: {
        prototype: HTMLEsPanelElement;
        new (): HTMLEsPanelElement;
    };
    /**
     * A header for `es-panel`.
     */
    interface HTMLEsPanelHeaderElement extends Components.EsPanelHeader, HTMLStencilElement {
    }
    var HTMLEsPanelHeaderElement: {
        prototype: HTMLEsPanelHeaderElement;
        new (): HTMLEsPanelHeaderElement;
    };
    /**
     * A sidebar. Automatically sets `--layout-sidebar-width` based on it's own width.
     */
    interface HTMLEsSidebarElement extends Components.EsSidebar, HTMLStencilElement {
    }
    var HTMLEsSidebarElement: {
        prototype: HTMLEsSidebarElement;
        new (): HTMLEsSidebarElement;
    };
    /**
     * A dropdown for the sidebar. Will automatically take the title and icon of the first active nested `es-layout-link` or `es-layout-button`.
     */
    interface HTMLEsSidebarDropdownElement extends Components.EsSidebarDropdown, HTMLStencilElement {
    }
    var HTMLEsSidebarDropdownElement: {
        prototype: HTMLEsSidebarDropdownElement;
        new (): HTMLEsSidebarDropdownElement;
    };
    /**
     * A theme picker dropdown for the header
     */
    interface HTMLEsThemeDropdownElement extends Components.EsThemeDropdown, HTMLStencilElement {
    }
    var HTMLEsThemeDropdownElement: {
        prototype: HTMLEsThemeDropdownElement;
        new (): HTMLEsThemeDropdownElement;
    };
    interface HTMLEsThemePickerElement extends Components.EsThemePicker, HTMLStencilElement {
    }
    var HTMLEsThemePickerElement: {
        prototype: HTMLEsThemePickerElement;
        new (): HTMLEsThemePickerElement;
    };
    /**
     * Placed in the toolbar area of the layout. Automatically sets `--layout-toolbar-width` based on it's own width.
     */
    interface HTMLEsToolbarElement extends Components.EsToolbar, HTMLStencilElement {
    }
    var HTMLEsToolbarElement: {
        prototype: HTMLEsToolbarElement;
        new (): HTMLEsToolbarElement;
    };
    interface HTMLElementTagNameMap {
        "es-breadcrumb": HTMLEsBreadcrumbElement;
        "es-display-error": HTMLEsDisplayErrorElement;
        "es-header": HTMLEsHeaderElement;
        "es-header-dropdown": HTMLEsHeaderDropdownElement;
        "es-layout-button": HTMLEsLayoutButtonElement;
        "es-layout-link": HTMLEsLayoutLinkElement;
        "es-layout-section": HTMLEsLayoutSectionElement;
        "es-loading-bar": HTMLEsLoadingBarElement;
        "es-logo": HTMLEsLogoElement;
        "es-nav": HTMLEsNavElement;
        "es-nav-node-0": HTMLEsNavNode0Element;
        "es-nav-node-1": HTMLEsNavNode1Element;
        "es-nav-node-2": HTMLEsNavNode2Element;
        "es-page-title": HTMLEsPageTitleElement;
        "es-panel": HTMLEsPanelElement;
        "es-panel-header": HTMLEsPanelHeaderElement;
        "es-sidebar": HTMLEsSidebarElement;
        "es-sidebar-dropdown": HTMLEsSidebarDropdownElement;
        "es-theme-dropdown": HTMLEsThemeDropdownElement;
        "es-theme-picker": HTMLEsThemePickerElement;
        "es-toolbar": HTMLEsToolbarElement;
    }
}
declare namespace LocalJSX {
    /**
     * A list of breadcrumbs to the current page
     */
    interface EsBreadcrumb {
        /**
          * The breadcrumbs to the current page.
         */
        "crumbs"?: Crumb[];
        /**
          * Do not warn if the crumbs do not match the current router location. (Only warns in dev mode)
         */
        "noValidate"?: boolean;
    }
    /**
     * Display an error to the user, with title and detail. Will automatically extract from HTTPError.
     */
    interface EsDisplayError {
        /**
          * The unrecoverable error. For a normal error, error.message will be displayed. For a `HTTPError` from `@eventstore-ui/utils` the details title and description will be shown.
         */
        "error"?: unknown;
        /**
          * Which styling variant to use.
         */
        "variant"?: DisplayErrorVariant;
    }
    /**
     * A site header for applications.
     */
    interface EsHeader {
    }
    /**
     * A dropdown for the header.
     */
    interface EsHeaderDropdown {
        /**
          * Display a dot on the icon, to attract attention to the button.
         */
        "alertLevel"?: HTMLEsBadgeElement['color'];
        /**
          * text for use in the button.
         */
        "buttonText"?: string;
        /**
          * If a caret should be rendered.
         */
        "caret"?: boolean;
        /**
          * Display a counter in place of the icon.
         */
        "count"?: number;
        /**
          * If the button should be disabled.
         */
        "disabled"?: boolean;
        /**
          * Icon for use in the button.
         */
        "icon"?: IconDescription;
        /**
          * Apply an indent to the left of the button, for basic nesting.
         */
        "level"?: number;
        /**
          * Which styling variant to use.
         */
        "variant"?: HeaderDropdownButtonVariant;
    }
    /**
     * A button for the sidebar, sidebar-dropdown, and header-dropdown.
     */
    interface EsLayoutButton {
        /**
          * If the button should display as active
         */
        "active"?: boolean;
        /**
          * Display a dot on the icon, to attract attention to the button.
         */
        "alertLevel"?: HTMLEsBadgeElement['color'];
        /**
          * If the parent popup should close when clicked.
         */
        "closeOnClick"?: boolean;
        /**
          * Display a counter in place of the icon.
         */
        "count"?: number;
        /**
          * If the button should be disabled.
         */
        "disabled"?: boolean;
        /**
          * Display an icon on the left.
         */
        "icon"?: IconDescription;
        /**
          * Apply an indent to the left of the button, for basic nesting.
         */
        "level"?: number;
        /**
          * Triggers the parent popup to close.
         */
        "onRequestClose"?: (event: EsLayoutButtonCustomEvent<any>) => void;
        /**
          * When deciding the active child, if multiple are active, the highest priority wins.
         */
        "priority"?: number;
    }
    /**
     * A link for the sidebar, sidebar-dropdown, and header-dropdown.
     */
    interface EsLayoutLink {
        /**
          * Display a dot on the icon, to attract attention to the link.
         */
        "alertLevel"?: HTMLEsBadgeElement['color'];
        /**
          * Display a counter in place of the icon.
         */
        "count"?: number;
        /**
          * If the link should be disabled.
         */
        "disabled"?: boolean;
        /**
          * If the link is external
         */
        "external"?: boolean;
        /**
          * If the Link should break out of the router, and force a page load
         */
        "forceRefresh"?: boolean;
        /**
          * Display an icon on the left.
         */
        "icon"?: IconDescription;
        /**
          * Apply an indent to the left of the link, for basic nesting.
         */
        "level"?: number;
        /**
          * Use exact url matching for active.
         */
        "matchExact"?: boolean;
        /**
          * Use strict url matching for active.
         */
        "matchStrict"?: boolean;
        /**
          * When to display as active. Uses the `url` by default.
         */
        "matchUrl"?: string;
        /**
          * When deciding the active child, if multiple are active, the highest priority wins.
         */
        "priority"?: number;
        /**
          * Target for link (eg: target="_blank")
         */
        "target"?: string;
        /**
          * Where to link to.
         */
        "url"?: string;
    }
    /**
     * A section with an optional title for containing layout-links
     */
    interface EsLayoutSection {
        /**
          * If the section is collapsable
         */
        "collapsable"?: boolean;
        /**
          * If the section should be collapsed by default
         */
        "defaultCollapsed"?: boolean;
        /**
          * Optionally renders a title
         */
        "sectionTitle"?: string;
    }
    /**
     * An animated loading bar, with coloured states.
     * The bar can be externally controlled via the `setProgress` util.
     * Add a bar named `page` for automatic control from `Page`.
     */
    interface EsLoadingBar {
        /**
          * The bar's name, for use in `setProgress`
         */
        "name": string;
    }
    /**
     * The Event Store logo.
     */
    interface EsLogo {
        /**
          * Height to constrain by.
         */
        "height"?: number;
        /**
          * Width to constrain by.
         */
        "width"?: number;
    }
    /**
     * Constructs a navigation from a NavTree.
     */
    interface EsNav {
        /**
          * The `NavTree` data structure that the navigation menu will be built from..
         */
        "navTree": NavTree;
    }
    interface EsNavNode0 {
        "active": boolean;
        "node": NavNode;
        "toggleRequest": () => void;
    }
    interface EsNavNode1 {
        "active": boolean;
        "node": NavNode;
        "toggleRequest": () => void;
    }
    interface EsNavNode2 {
        "node": NavNode;
    }
    /**
     * Standard page title
     */
    interface EsPageTitle {
    }
    /**
     * A panel. Automatically sets `--layout-panel-height` based on it's height, and when resized.
     */
    interface EsPanel {
    }
    /**
     * A header for `es-panel`.
     */
    interface EsPanelHeader {
    }
    /**
     * A sidebar. Automatically sets `--layout-sidebar-width` based on it's own width.
     */
    interface EsSidebar {
    }
    /**
     * A dropdown for the sidebar. Will automatically take the title and icon of the first active nested `es-layout-link` or `es-layout-button`.
     */
    interface EsSidebarDropdown {
        /**
          * The icon to display if no nested es-layout-link or es-layout-button is active
         */
        "defaultIcon": IconDescription;
        /**
          * The title to display if no nested es-layout-link or es-layout-button is active
         */
        "defaultTitle": string;
    }
    /**
     * A theme picker dropdown for the header
     */
    interface EsThemeDropdown {
        /**
          * Which styling variant to use.
         */
        "variant"?: HeaderDropdownButtonVariant;
    }
    interface EsThemePicker {
    }
    /**
     * Placed in the toolbar area of the layout. Automatically sets `--layout-toolbar-width` based on it's own width.
     */
    interface EsToolbar {
    }
    interface IntrinsicElements {
        "es-breadcrumb": EsBreadcrumb;
        "es-display-error": EsDisplayError;
        "es-header": EsHeader;
        "es-header-dropdown": EsHeaderDropdown;
        "es-layout-button": EsLayoutButton;
        "es-layout-link": EsLayoutLink;
        "es-layout-section": EsLayoutSection;
        "es-loading-bar": EsLoadingBar;
        "es-logo": EsLogo;
        "es-nav": EsNav;
        "es-nav-node-0": EsNavNode0;
        "es-nav-node-1": EsNavNode1;
        "es-nav-node-2": EsNavNode2;
        "es-page-title": EsPageTitle;
        "es-panel": EsPanel;
        "es-panel-header": EsPanelHeader;
        "es-sidebar": EsSidebar;
        "es-sidebar-dropdown": EsSidebarDropdown;
        "es-theme-dropdown": EsThemeDropdown;
        "es-theme-picker": EsThemePicker;
        "es-toolbar": EsToolbar;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * A list of breadcrumbs to the current page
             */
            "es-breadcrumb": LocalJSX.EsBreadcrumb & JSXBase.HTMLAttributes<HTMLEsBreadcrumbElement>;
            /**
             * Display an error to the user, with title and detail. Will automatically extract from HTTPError.
             */
            "es-display-error": LocalJSX.EsDisplayError & JSXBase.HTMLAttributes<HTMLEsDisplayErrorElement>;
            /**
             * A site header for applications.
             */
            "es-header": LocalJSX.EsHeader & JSXBase.HTMLAttributes<HTMLEsHeaderElement>;
            /**
             * A dropdown for the header.
             */
            "es-header-dropdown": LocalJSX.EsHeaderDropdown & JSXBase.HTMLAttributes<HTMLEsHeaderDropdownElement>;
            /**
             * A button for the sidebar, sidebar-dropdown, and header-dropdown.
             */
            "es-layout-button": LocalJSX.EsLayoutButton & JSXBase.HTMLAttributes<HTMLEsLayoutButtonElement>;
            /**
             * A link for the sidebar, sidebar-dropdown, and header-dropdown.
             */
            "es-layout-link": LocalJSX.EsLayoutLink & JSXBase.HTMLAttributes<HTMLEsLayoutLinkElement>;
            /**
             * A section with an optional title for containing layout-links
             */
            "es-layout-section": LocalJSX.EsLayoutSection & JSXBase.HTMLAttributes<HTMLEsLayoutSectionElement>;
            /**
             * An animated loading bar, with coloured states.
             * The bar can be externally controlled via the `setProgress` util.
             * Add a bar named `page` for automatic control from `Page`.
             */
            "es-loading-bar": LocalJSX.EsLoadingBar & JSXBase.HTMLAttributes<HTMLEsLoadingBarElement>;
            /**
             * The Event Store logo.
             */
            "es-logo": LocalJSX.EsLogo & JSXBase.HTMLAttributes<HTMLEsLogoElement>;
            /**
             * Constructs a navigation from a NavTree.
             */
            "es-nav": LocalJSX.EsNav & JSXBase.HTMLAttributes<HTMLEsNavElement>;
            "es-nav-node-0": LocalJSX.EsNavNode0 & JSXBase.HTMLAttributes<HTMLEsNavNode0Element>;
            "es-nav-node-1": LocalJSX.EsNavNode1 & JSXBase.HTMLAttributes<HTMLEsNavNode1Element>;
            "es-nav-node-2": LocalJSX.EsNavNode2 & JSXBase.HTMLAttributes<HTMLEsNavNode2Element>;
            /**
             * Standard page title
             */
            "es-page-title": LocalJSX.EsPageTitle & JSXBase.HTMLAttributes<HTMLEsPageTitleElement>;
            /**
             * A panel. Automatically sets `--layout-panel-height` based on it's height, and when resized.
             */
            "es-panel": LocalJSX.EsPanel & JSXBase.HTMLAttributes<HTMLEsPanelElement>;
            /**
             * A header for `es-panel`.
             */
            "es-panel-header": LocalJSX.EsPanelHeader & JSXBase.HTMLAttributes<HTMLEsPanelHeaderElement>;
            /**
             * A sidebar. Automatically sets `--layout-sidebar-width` based on it's own width.
             */
            "es-sidebar": LocalJSX.EsSidebar & JSXBase.HTMLAttributes<HTMLEsSidebarElement>;
            /**
             * A dropdown for the sidebar. Will automatically take the title and icon of the first active nested `es-layout-link` or `es-layout-button`.
             */
            "es-sidebar-dropdown": LocalJSX.EsSidebarDropdown & JSXBase.HTMLAttributes<HTMLEsSidebarDropdownElement>;
            /**
             * A theme picker dropdown for the header
             */
            "es-theme-dropdown": LocalJSX.EsThemeDropdown & JSXBase.HTMLAttributes<HTMLEsThemeDropdownElement>;
            "es-theme-picker": LocalJSX.EsThemePicker & JSXBase.HTMLAttributes<HTMLEsThemePickerElement>;
            /**
             * Placed in the toolbar area of the layout. Automatically sets `--layout-toolbar-width` based on it's own width.
             */
            "es-toolbar": LocalJSX.EsToolbar & JSXBase.HTMLAttributes<HTMLEsToolbarElement>;
        }
    }
}
