/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Crumb } from "./components/breadcrumb/types";
import { DisplayErrorVariant } from "./components/display-error/types";
import { EmptyStateLayout } from "./components/empty-state/types";
import { IconDescription, Placement } from "@eventstore-ui/components";
import { PanelMode } from "./components/panel";
import { LoadingBarStatus } from "./components/loading-bar/types";
import { NavNode, NavTree } from "./components/nav/types";
import { ClosedMode, PanelDetailsListener, PanelMode as PanelMode1, TargetableArea, TargetableEdge } from "./components/panel/types";
export { Crumb } from "./components/breadcrumb/types";
export { DisplayErrorVariant } from "./components/display-error/types";
export { EmptyStateLayout } from "./components/empty-state/types";
export { IconDescription, Placement } from "@eventstore-ui/components";
export { PanelMode } from "./components/panel";
export { LoadingBarStatus } from "./components/loading-bar/types";
export { NavNode, NavTree } from "./components/nav/types";
export { ClosedMode, PanelDetailsListener, PanelMode as PanelMode1, TargetableArea, TargetableEdge } from "./components/panel/types";
export namespace Components {
    /**
     * A list of breadcrumbs to the current page
     */
    interface L2Breadcrumb {
        /**
          * The breadcrumbs to the current page.
         */
        "crumbs": Crumb[];
        /**
          * Do not warn if the crumbs do not match the current router location. (Only warns in dev mode)
         */
        "noValidate": boolean;
    }
    /**
     * Display an error to the user, with title and detail. Will automatically extract from HTTPError.
     */
    interface L2DisplayError {
        /**
          * The unrecoverable error. For a normal error, error.message will be displayed. For a `HTTPError` from `@kurrent-ui/utils` the details title and description will be shown.
         */
        "error": unknown;
        /**
          * Which styling variant to use.
         */
        "variant": DisplayErrorVariant;
    }
    /**
     * Display an empty state with an illustration and a message.
     * Intended for use as `Page`'s `renderEmptyState`.
     */
    interface L2EmptyState {
        /**
          * The header of the empty state.
         */
        "header": string;
        /**
          * The layout of the empty state.
         */
        "layout": EmptyStateLayout;
    }
    /**
     * A site header for applications.
     */
    interface L2Header {
    }
    /**
     * A dropdown for the header.
     */
    interface L2HeaderDropdown {
        /**
          * Display a dot on the icon, to attract attention to the button.
         */
        "alertLevel"?: HTMLEsBadgeElement['color'];
        /**
          * text for use in the button.
         */
        "buttonText"?: string;
        /**
          * If a caret should be rendered.
         */
        "caret": boolean;
        /**
          * Display a counter in place of the icon.
         */
        "count"?: number;
        /**
          * If the button should be disabled.
         */
        "disabled": boolean;
        /**
          * Icon for use in the button.
         */
        "icon"?: IconDescription;
        /**
          * Apply an indent to the left of the button, for basic nesting.
         */
        "level"?: number;
    }
    interface L2LayoutAutoLabel {
        /**
          * How to extract the label text
         */
        "extractLabel"?: ($el: HTMLElement) => string;
        /**
          * Where to place the label
         */
        "placement": Placement;
        /**
          * Selector for selecting elements to auto label
         */
        "selector": string;
    }
    /**
     * A button for the sidebar, sidebar-dropdown, and header-dropdown.
     */
    interface L2LayoutButton {
        /**
          * If the button should display as active
         */
        "active": boolean;
        /**
          * Display a dot on the icon, to attract attention to the button.
         */
        "alertLevel"?: HTMLEsBadgeElement['color'];
        /**
          * If the parent popup should close when clicked.
         */
        "closeOnClick": boolean;
        /**
          * Display a counter in place of the icon.
         */
        "count"?: number;
        /**
          * If the button should be disabled.
         */
        "disabled": boolean;
        /**
          * Display an icon on the left.
         */
        "icon"?: IconDescription;
        /**
          * If the button is currently active
         */
        "isActive": () => Promise<boolean>;
        /**
          * Apply an indent to the left of the button, for basic nesting.
         */
        "level"?: number;
        /**
          * When deciding the active child, if multiple are active, the highest priority wins.
         */
        "priority": number;
    }
    /**
     * A horizontal rule
     */
    interface L2LayoutHr {
    }
    /**
     * A link for the sidebar, sidebar-dropdown, and header-dropdown.
     */
    interface L2LayoutLink {
        /**
          * Display a dot on the icon, to attract attention to the link.
         */
        "alertLevel"?: HTMLEsBadgeElement['color'];
        /**
          * Display a counter in place of the icon.
         */
        "count"?: number;
        /**
          * If the link should be disabled.
         */
        "disabled": boolean;
        /**
          * If the link is external
         */
        "external"?: boolean;
        /**
          * If the Link should break out of the router, and force a page load
         */
        "forceRefresh"?: boolean;
        /**
          * Display an icon on the left.
         */
        "icon"?: IconDescription;
        /**
          * If the link is currently active
         */
        "isActive": () => Promise<boolean>;
        /**
          * Apply an indent to the left of the link, for basic nesting.
         */
        "level"?: number;
        /**
          * Use exact url matching for active.
         */
        "matchExact"?: boolean;
        /**
          * Use strict url matching for active.
         */
        "matchStrict"?: boolean;
        /**
          * When to display as active. Uses the `url` by default.
         */
        "matchUrl"?: string;
        /**
          * When deciding the active child, if multiple are active, the highest priority wins.
         */
        "priority": number;
        /**
          * Target for link (eg: target="_blank")
         */
        "target"?: string;
        /**
          * Where to link to.
         */
        "url"?: string;
    }
    /**
     * A section with an optional title for containing layout-links
     */
    interface L2LayoutSection {
        /**
          * If the section should label it's contents with a popover
         */
        "autoLabel": boolean | PanelMode;
        /**
          * If the section is collapsable
         */
        "collapsable": boolean;
        /**
          * If the section should be collapsed by default
         */
        "defaultCollapsed": boolean;
        /**
          * Optionally renders a title
         */
        "sectionTitle"?: string;
    }
    /**
     * An animated loading bar, with coloured states.
     * The bar can be externally controlled via the `setProgress` util.
     * Add a bar named `page` for automatic control from `Page`.
     */
    interface L2LoadingBar {
        /**
          * The bar's name, for use in `setProgress`
         */
        "name": string;
        /**
          * Set (and animate to) a progress.
         */
        "progress": (completion: number, status?: LoadingBarStatus) => Promise<void>;
    }
    /**
     * The Event Store logo.
     */
    interface L2Logo {
        /**
          * Height to constrain by.
         */
        "height": number;
        /**
          * If the kurrent text should be displayed.
         */
        "mode": 'full' | 'icon';
        /**
          * Width to constrain by.
         */
        "width": number;
    }
    /**
     * Constructs a navigation from a NavTree.
     */
    interface L2Nav {
        /**
          * The `NavTree` data structure that the navigation menu will be built from..
         */
        "navTree": NavTree;
    }
    interface L2NavNode0 {
        "active": boolean;
        "node": NavNode;
        "toggleRequest": () => void;
    }
    interface L2NavNode1 {
        "active": boolean;
        "node": NavNode;
        "toggleRequest": () => void;
    }
    interface L2NavNode2 {
        "node": NavNode;
    }
    /**
     * Standard page title
     */
    interface L2PageTitle {
    }
    /**
     * A resizable panel. Automatically sets the relevant layout var based on it's size and when resized.
     */
    interface L2Panel {
        /**
          * Where to place the panel.
         */
        "area": TargetableArea;
        "attachPanelDetailsListener": (listener: PanelDetailsListener) => Promise<void>;
        /**
          * When to snap the panel closed (if a closed mode is set).
         */
        "closeAt": number;
        /**
          * How the panel should respond to being closed.
         */
        "closedMode": ClosedMode;
        /**
          * How large the panel should be when closed.
         */
        "closedSize": number;
        /**
          * What size to default to.
         */
        "defaultSize": number;
        "detachPanelDetailsListener": (listener: PanelDetailsListener) => Promise<void>;
        /**
          * Where to end the panel, inclusive. Must be the opposite axis to the area.
         */
        "end"?: TargetableEdge;
        /**
          * The maximum possible size to resize to.
         */
        "maximumSize": number;
        /**
          * The minimum possible size to resize to.
         */
        "minimumSize": number;
        /**
          * If the last mode of the panel should be kept in local storage.
         */
        "rememberMode"?: string | false;
        /**
          * If the size of the panel should be kept in local storage.
         */
        "rememberSize"?: string | false;
        /**
          * Where to start the panel, inclusive. Must be the opposite axis to the area.
         */
        "start"?: TargetableEdge;
    }
    /**
     * A header for `l2-panel`.
     */
    interface L2PanelHeader {
    }
    /**
     * A sidebar. Automatically sets `--layout-sidebar-width` based on it's own width.
     */
    interface L2Sidebar {
    }
    /**
     * A dropdown for the sidebar. Will automatically take the title and icon of the first active nested `l2-layout-link` or `l2-layout-button`.
     */
    interface L2SidebarDropdown {
        /**
          * The icon to display if no nested l2-layout-link or l2-layout-button is active
         */
        "defaultIcon": IconDescription;
        /**
          * The title to display if no nested l2-layout-link or l2-layout-button is active
         */
        "defaultTitle": string;
    }
    /**
     * A panel that takes the size of it's content.
     * Automatically sets the relevant layout var based on it's size.
     */
    interface L2SizedPanel {
        /**
          * Where to place the panel.
         */
        "area": TargetableArea;
        /**
          * Where to end the panel, inclusive. Must be the opposite axis to the area.
         */
        "end"?: TargetableEdge;
        /**
          * Where to start the panel, inclusive. Must be the opposite axis to the area.
         */
        "start"?: TargetableEdge;
    }
    /**
     * A theme picker dropdown for the header
     */
    interface L2ThemeDropdown {
    }
    interface L2ThemePicker {
    }
    /**
     * Placed in the toolbar area of the layout. Automatically sets `--layout-toolbar-width` based on it's own width.
     */
    interface L2Toolbar {
    }
}
export interface L2LayoutButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLL2LayoutButtonElement;
}
export interface L2PanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLL2PanelElement;
}
declare global {
    /**
     * A list of breadcrumbs to the current page
     */
    interface HTMLL2BreadcrumbElement extends Components.L2Breadcrumb, HTMLStencilElement {
    }
    var HTMLL2BreadcrumbElement: {
        prototype: HTMLL2BreadcrumbElement;
        new (): HTMLL2BreadcrumbElement;
    };
    /**
     * Display an error to the user, with title and detail. Will automatically extract from HTTPError.
     */
    interface HTMLL2DisplayErrorElement extends Components.L2DisplayError, HTMLStencilElement {
    }
    var HTMLL2DisplayErrorElement: {
        prototype: HTMLL2DisplayErrorElement;
        new (): HTMLL2DisplayErrorElement;
    };
    /**
     * Display an empty state with an illustration and a message.
     * Intended for use as `Page`'s `renderEmptyState`.
     */
    interface HTMLL2EmptyStateElement extends Components.L2EmptyState, HTMLStencilElement {
    }
    var HTMLL2EmptyStateElement: {
        prototype: HTMLL2EmptyStateElement;
        new (): HTMLL2EmptyStateElement;
    };
    /**
     * A site header for applications.
     */
    interface HTMLL2HeaderElement extends Components.L2Header, HTMLStencilElement {
    }
    var HTMLL2HeaderElement: {
        prototype: HTMLL2HeaderElement;
        new (): HTMLL2HeaderElement;
    };
    /**
     * A dropdown for the header.
     */
    interface HTMLL2HeaderDropdownElement extends Components.L2HeaderDropdown, HTMLStencilElement {
    }
    var HTMLL2HeaderDropdownElement: {
        prototype: HTMLL2HeaderDropdownElement;
        new (): HTMLL2HeaderDropdownElement;
    };
    interface HTMLL2LayoutAutoLabelElement extends Components.L2LayoutAutoLabel, HTMLStencilElement {
    }
    var HTMLL2LayoutAutoLabelElement: {
        prototype: HTMLL2LayoutAutoLabelElement;
        new (): HTMLL2LayoutAutoLabelElement;
    };
    interface HTMLL2LayoutButtonElementEventMap {
        "requestClose": any;
    }
    /**
     * A button for the sidebar, sidebar-dropdown, and header-dropdown.
     */
    interface HTMLL2LayoutButtonElement extends Components.L2LayoutButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLL2LayoutButtonElementEventMap>(type: K, listener: (this: HTMLL2LayoutButtonElement, ev: L2LayoutButtonCustomEvent<HTMLL2LayoutButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLL2LayoutButtonElementEventMap>(type: K, listener: (this: HTMLL2LayoutButtonElement, ev: L2LayoutButtonCustomEvent<HTMLL2LayoutButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLL2LayoutButtonElement: {
        prototype: HTMLL2LayoutButtonElement;
        new (): HTMLL2LayoutButtonElement;
    };
    /**
     * A horizontal rule
     */
    interface HTMLL2LayoutHrElement extends Components.L2LayoutHr, HTMLStencilElement {
    }
    var HTMLL2LayoutHrElement: {
        prototype: HTMLL2LayoutHrElement;
        new (): HTMLL2LayoutHrElement;
    };
    /**
     * A link for the sidebar, sidebar-dropdown, and header-dropdown.
     */
    interface HTMLL2LayoutLinkElement extends Components.L2LayoutLink, HTMLStencilElement {
    }
    var HTMLL2LayoutLinkElement: {
        prototype: HTMLL2LayoutLinkElement;
        new (): HTMLL2LayoutLinkElement;
    };
    /**
     * A section with an optional title for containing layout-links
     */
    interface HTMLL2LayoutSectionElement extends Components.L2LayoutSection, HTMLStencilElement {
    }
    var HTMLL2LayoutSectionElement: {
        prototype: HTMLL2LayoutSectionElement;
        new (): HTMLL2LayoutSectionElement;
    };
    /**
     * An animated loading bar, with coloured states.
     * The bar can be externally controlled via the `setProgress` util.
     * Add a bar named `page` for automatic control from `Page`.
     */
    interface HTMLL2LoadingBarElement extends Components.L2LoadingBar, HTMLStencilElement {
    }
    var HTMLL2LoadingBarElement: {
        prototype: HTMLL2LoadingBarElement;
        new (): HTMLL2LoadingBarElement;
    };
    /**
     * The Event Store logo.
     */
    interface HTMLL2LogoElement extends Components.L2Logo, HTMLStencilElement {
    }
    var HTMLL2LogoElement: {
        prototype: HTMLL2LogoElement;
        new (): HTMLL2LogoElement;
    };
    /**
     * Constructs a navigation from a NavTree.
     */
    interface HTMLL2NavElement extends Components.L2Nav, HTMLStencilElement {
    }
    var HTMLL2NavElement: {
        prototype: HTMLL2NavElement;
        new (): HTMLL2NavElement;
    };
    interface HTMLL2NavNode0Element extends Components.L2NavNode0, HTMLStencilElement {
    }
    var HTMLL2NavNode0Element: {
        prototype: HTMLL2NavNode0Element;
        new (): HTMLL2NavNode0Element;
    };
    interface HTMLL2NavNode1Element extends Components.L2NavNode1, HTMLStencilElement {
    }
    var HTMLL2NavNode1Element: {
        prototype: HTMLL2NavNode1Element;
        new (): HTMLL2NavNode1Element;
    };
    interface HTMLL2NavNode2Element extends Components.L2NavNode2, HTMLStencilElement {
    }
    var HTMLL2NavNode2Element: {
        prototype: HTMLL2NavNode2Element;
        new (): HTMLL2NavNode2Element;
    };
    /**
     * Standard page title
     */
    interface HTMLL2PageTitleElement extends Components.L2PageTitle, HTMLStencilElement {
    }
    var HTMLL2PageTitleElement: {
        prototype: HTMLL2PageTitleElement;
        new (): HTMLL2PageTitleElement;
    };
    interface HTMLL2PanelElementEventMap {
        "modeChange": PanelMode1;
    }
    /**
     * A resizable panel. Automatically sets the relevant layout var based on it's size and when resized.
     */
    interface HTMLL2PanelElement extends Components.L2Panel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLL2PanelElementEventMap>(type: K, listener: (this: HTMLL2PanelElement, ev: L2PanelCustomEvent<HTMLL2PanelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLL2PanelElementEventMap>(type: K, listener: (this: HTMLL2PanelElement, ev: L2PanelCustomEvent<HTMLL2PanelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLL2PanelElement: {
        prototype: HTMLL2PanelElement;
        new (): HTMLL2PanelElement;
    };
    /**
     * A header for `l2-panel`.
     */
    interface HTMLL2PanelHeaderElement extends Components.L2PanelHeader, HTMLStencilElement {
    }
    var HTMLL2PanelHeaderElement: {
        prototype: HTMLL2PanelHeaderElement;
        new (): HTMLL2PanelHeaderElement;
    };
    /**
     * A sidebar. Automatically sets `--layout-sidebar-width` based on it's own width.
     */
    interface HTMLL2SidebarElement extends Components.L2Sidebar, HTMLStencilElement {
    }
    var HTMLL2SidebarElement: {
        prototype: HTMLL2SidebarElement;
        new (): HTMLL2SidebarElement;
    };
    /**
     * A dropdown for the sidebar. Will automatically take the title and icon of the first active nested `l2-layout-link` or `l2-layout-button`.
     */
    interface HTMLL2SidebarDropdownElement extends Components.L2SidebarDropdown, HTMLStencilElement {
    }
    var HTMLL2SidebarDropdownElement: {
        prototype: HTMLL2SidebarDropdownElement;
        new (): HTMLL2SidebarDropdownElement;
    };
    /**
     * A panel that takes the size of it's content.
     * Automatically sets the relevant layout var based on it's size.
     */
    interface HTMLL2SizedPanelElement extends Components.L2SizedPanel, HTMLStencilElement {
    }
    var HTMLL2SizedPanelElement: {
        prototype: HTMLL2SizedPanelElement;
        new (): HTMLL2SizedPanelElement;
    };
    /**
     * A theme picker dropdown for the header
     */
    interface HTMLL2ThemeDropdownElement extends Components.L2ThemeDropdown, HTMLStencilElement {
    }
    var HTMLL2ThemeDropdownElement: {
        prototype: HTMLL2ThemeDropdownElement;
        new (): HTMLL2ThemeDropdownElement;
    };
    interface HTMLL2ThemePickerElement extends Components.L2ThemePicker, HTMLStencilElement {
    }
    var HTMLL2ThemePickerElement: {
        prototype: HTMLL2ThemePickerElement;
        new (): HTMLL2ThemePickerElement;
    };
    /**
     * Placed in the toolbar area of the layout. Automatically sets `--layout-toolbar-width` based on it's own width.
     */
    interface HTMLL2ToolbarElement extends Components.L2Toolbar, HTMLStencilElement {
    }
    var HTMLL2ToolbarElement: {
        prototype: HTMLL2ToolbarElement;
        new (): HTMLL2ToolbarElement;
    };
    interface HTMLElementTagNameMap {
        "l2-breadcrumb": HTMLL2BreadcrumbElement;
        "l2-display-error": HTMLL2DisplayErrorElement;
        "l2-empty-state": HTMLL2EmptyStateElement;
        "l2-header": HTMLL2HeaderElement;
        "l2-header-dropdown": HTMLL2HeaderDropdownElement;
        "l2-layout-auto-label": HTMLL2LayoutAutoLabelElement;
        "l2-layout-button": HTMLL2LayoutButtonElement;
        "l2-layout-hr": HTMLL2LayoutHrElement;
        "l2-layout-link": HTMLL2LayoutLinkElement;
        "l2-layout-section": HTMLL2LayoutSectionElement;
        "l2-loading-bar": HTMLL2LoadingBarElement;
        "l2-logo": HTMLL2LogoElement;
        "l2-nav": HTMLL2NavElement;
        "l2-nav-node-0": HTMLL2NavNode0Element;
        "l2-nav-node-1": HTMLL2NavNode1Element;
        "l2-nav-node-2": HTMLL2NavNode2Element;
        "l2-page-title": HTMLL2PageTitleElement;
        "l2-panel": HTMLL2PanelElement;
        "l2-panel-header": HTMLL2PanelHeaderElement;
        "l2-sidebar": HTMLL2SidebarElement;
        "l2-sidebar-dropdown": HTMLL2SidebarDropdownElement;
        "l2-sized-panel": HTMLL2SizedPanelElement;
        "l2-theme-dropdown": HTMLL2ThemeDropdownElement;
        "l2-theme-picker": HTMLL2ThemePickerElement;
        "l2-toolbar": HTMLL2ToolbarElement;
    }
}
declare namespace LocalJSX {
    /**
     * A list of breadcrumbs to the current page
     */
    interface L2Breadcrumb {
        /**
          * The breadcrumbs to the current page.
         */
        "crumbs"?: Crumb[];
        /**
          * Do not warn if the crumbs do not match the current router location. (Only warns in dev mode)
         */
        "noValidate"?: boolean;
    }
    /**
     * Display an error to the user, with title and detail. Will automatically extract from HTTPError.
     */
    interface L2DisplayError {
        /**
          * The unrecoverable error. For a normal error, error.message will be displayed. For a `HTTPError` from `@kurrent-ui/utils` the details title and description will be shown.
         */
        "error"?: unknown;
        /**
          * Which styling variant to use.
         */
        "variant"?: DisplayErrorVariant;
    }
    /**
     * Display an empty state with an illustration and a message.
     * Intended for use as `Page`'s `renderEmptyState`.
     */
    interface L2EmptyState {
        /**
          * The header of the empty state.
         */
        "header": string;
        /**
          * The layout of the empty state.
         */
        "layout"?: EmptyStateLayout;
    }
    /**
     * A site header for applications.
     */
    interface L2Header {
    }
    /**
     * A dropdown for the header.
     */
    interface L2HeaderDropdown {
        /**
          * Display a dot on the icon, to attract attention to the button.
         */
        "alertLevel"?: HTMLEsBadgeElement['color'];
        /**
          * text for use in the button.
         */
        "buttonText"?: string;
        /**
          * If a caret should be rendered.
         */
        "caret"?: boolean;
        /**
          * Display a counter in place of the icon.
         */
        "count"?: number;
        /**
          * If the button should be disabled.
         */
        "disabled"?: boolean;
        /**
          * Icon for use in the button.
         */
        "icon"?: IconDescription;
        /**
          * Apply an indent to the left of the button, for basic nesting.
         */
        "level"?: number;
    }
    interface L2LayoutAutoLabel {
        /**
          * How to extract the label text
         */
        "extractLabel"?: ($el: HTMLElement) => string;
        /**
          * Where to place the label
         */
        "placement": Placement;
        /**
          * Selector for selecting elements to auto label
         */
        "selector"?: string;
    }
    /**
     * A button for the sidebar, sidebar-dropdown, and header-dropdown.
     */
    interface L2LayoutButton {
        /**
          * If the button should display as active
         */
        "active"?: boolean;
        /**
          * Display a dot on the icon, to attract attention to the button.
         */
        "alertLevel"?: HTMLEsBadgeElement['color'];
        /**
          * If the parent popup should close when clicked.
         */
        "closeOnClick"?: boolean;
        /**
          * Display a counter in place of the icon.
         */
        "count"?: number;
        /**
          * If the button should be disabled.
         */
        "disabled"?: boolean;
        /**
          * Display an icon on the left.
         */
        "icon"?: IconDescription;
        /**
          * Apply an indent to the left of the button, for basic nesting.
         */
        "level"?: number;
        /**
          * Triggers the parent popup to close.
         */
        "onRequestClose"?: (event: L2LayoutButtonCustomEvent<any>) => void;
        /**
          * When deciding the active child, if multiple are active, the highest priority wins.
         */
        "priority"?: number;
    }
    /**
     * A horizontal rule
     */
    interface L2LayoutHr {
    }
    /**
     * A link for the sidebar, sidebar-dropdown, and header-dropdown.
     */
    interface L2LayoutLink {
        /**
          * Display a dot on the icon, to attract attention to the link.
         */
        "alertLevel"?: HTMLEsBadgeElement['color'];
        /**
          * Display a counter in place of the icon.
         */
        "count"?: number;
        /**
          * If the link should be disabled.
         */
        "disabled"?: boolean;
        /**
          * If the link is external
         */
        "external"?: boolean;
        /**
          * If the Link should break out of the router, and force a page load
         */
        "forceRefresh"?: boolean;
        /**
          * Display an icon on the left.
         */
        "icon"?: IconDescription;
        /**
          * Apply an indent to the left of the link, for basic nesting.
         */
        "level"?: number;
        /**
          * Use exact url matching for active.
         */
        "matchExact"?: boolean;
        /**
          * Use strict url matching for active.
         */
        "matchStrict"?: boolean;
        /**
          * When to display as active. Uses the `url` by default.
         */
        "matchUrl"?: string;
        /**
          * When deciding the active child, if multiple are active, the highest priority wins.
         */
        "priority"?: number;
        /**
          * Target for link (eg: target="_blank")
         */
        "target"?: string;
        /**
          * Where to link to.
         */
        "url"?: string;
    }
    /**
     * A section with an optional title for containing layout-links
     */
    interface L2LayoutSection {
        /**
          * If the section should label it's contents with a popover
         */
        "autoLabel"?: boolean | PanelMode;
        /**
          * If the section is collapsable
         */
        "collapsable"?: boolean;
        /**
          * If the section should be collapsed by default
         */
        "defaultCollapsed"?: boolean;
        /**
          * Optionally renders a title
         */
        "sectionTitle"?: string;
    }
    /**
     * An animated loading bar, with coloured states.
     * The bar can be externally controlled via the `setProgress` util.
     * Add a bar named `page` for automatic control from `Page`.
     */
    interface L2LoadingBar {
        /**
          * The bar's name, for use in `setProgress`
         */
        "name": string;
    }
    /**
     * The Event Store logo.
     */
    interface L2Logo {
        /**
          * Height to constrain by.
         */
        "height"?: number;
        /**
          * If the kurrent text should be displayed.
         */
        "mode"?: 'full' | 'icon';
        /**
          * Width to constrain by.
         */
        "width"?: number;
    }
    /**
     * Constructs a navigation from a NavTree.
     */
    interface L2Nav {
        /**
          * The `NavTree` data structure that the navigation menu will be built from..
         */
        "navTree": NavTree;
    }
    interface L2NavNode0 {
        "active": boolean;
        "node": NavNode;
        "toggleRequest": () => void;
    }
    interface L2NavNode1 {
        "active": boolean;
        "node": NavNode;
        "toggleRequest": () => void;
    }
    interface L2NavNode2 {
        "node": NavNode;
    }
    /**
     * Standard page title
     */
    interface L2PageTitle {
    }
    /**
     * A resizable panel. Automatically sets the relevant layout var based on it's size and when resized.
     */
    interface L2Panel {
        /**
          * Where to place the panel.
         */
        "area"?: TargetableArea;
        /**
          * When to snap the panel closed (if a closed mode is set).
         */
        "closeAt"?: number;
        /**
          * How the panel should respond to being closed.
         */
        "closedMode"?: ClosedMode;
        /**
          * How large the panel should be when closed.
         */
        "closedSize"?: number;
        /**
          * What size to default to.
         */
        "defaultSize"?: number;
        /**
          * Where to end the panel, inclusive. Must be the opposite axis to the area.
         */
        "end"?: TargetableEdge;
        /**
          * The maximum possible size to resize to.
         */
        "maximumSize"?: number;
        /**
          * The minimum possible size to resize to.
         */
        "minimumSize"?: number;
        /**
          * Triggers when the panel's mode changes.
         */
        "onModeChange"?: (event: L2PanelCustomEvent<PanelMode1>) => void;
        /**
          * If the last mode of the panel should be kept in local storage.
         */
        "rememberMode"?: string | false;
        /**
          * If the size of the panel should be kept in local storage.
         */
        "rememberSize"?: string | false;
        /**
          * Where to start the panel, inclusive. Must be the opposite axis to the area.
         */
        "start"?: TargetableEdge;
    }
    /**
     * A header for `l2-panel`.
     */
    interface L2PanelHeader {
    }
    /**
     * A sidebar. Automatically sets `--layout-sidebar-width` based on it's own width.
     */
    interface L2Sidebar {
    }
    /**
     * A dropdown for the sidebar. Will automatically take the title and icon of the first active nested `l2-layout-link` or `l2-layout-button`.
     */
    interface L2SidebarDropdown {
        /**
          * The icon to display if no nested l2-layout-link or l2-layout-button is active
         */
        "defaultIcon": IconDescription;
        /**
          * The title to display if no nested l2-layout-link or l2-layout-button is active
         */
        "defaultTitle": string;
    }
    /**
     * A panel that takes the size of it's content.
     * Automatically sets the relevant layout var based on it's size.
     */
    interface L2SizedPanel {
        /**
          * Where to place the panel.
         */
        "area"?: TargetableArea;
        /**
          * Where to end the panel, inclusive. Must be the opposite axis to the area.
         */
        "end"?: TargetableEdge;
        /**
          * Where to start the panel, inclusive. Must be the opposite axis to the area.
         */
        "start"?: TargetableEdge;
    }
    /**
     * A theme picker dropdown for the header
     */
    interface L2ThemeDropdown {
    }
    interface L2ThemePicker {
    }
    /**
     * Placed in the toolbar area of the layout. Automatically sets `--layout-toolbar-width` based on it's own width.
     */
    interface L2Toolbar {
    }
    interface IntrinsicElements {
        "l2-breadcrumb": L2Breadcrumb;
        "l2-display-error": L2DisplayError;
        "l2-empty-state": L2EmptyState;
        "l2-header": L2Header;
        "l2-header-dropdown": L2HeaderDropdown;
        "l2-layout-auto-label": L2LayoutAutoLabel;
        "l2-layout-button": L2LayoutButton;
        "l2-layout-hr": L2LayoutHr;
        "l2-layout-link": L2LayoutLink;
        "l2-layout-section": L2LayoutSection;
        "l2-loading-bar": L2LoadingBar;
        "l2-logo": L2Logo;
        "l2-nav": L2Nav;
        "l2-nav-node-0": L2NavNode0;
        "l2-nav-node-1": L2NavNode1;
        "l2-nav-node-2": L2NavNode2;
        "l2-page-title": L2PageTitle;
        "l2-panel": L2Panel;
        "l2-panel-header": L2PanelHeader;
        "l2-sidebar": L2Sidebar;
        "l2-sidebar-dropdown": L2SidebarDropdown;
        "l2-sized-panel": L2SizedPanel;
        "l2-theme-dropdown": L2ThemeDropdown;
        "l2-theme-picker": L2ThemePicker;
        "l2-toolbar": L2Toolbar;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * A list of breadcrumbs to the current page
             */
            "l2-breadcrumb": LocalJSX.L2Breadcrumb & JSXBase.HTMLAttributes<HTMLL2BreadcrumbElement>;
            /**
             * Display an error to the user, with title and detail. Will automatically extract from HTTPError.
             */
            "l2-display-error": LocalJSX.L2DisplayError & JSXBase.HTMLAttributes<HTMLL2DisplayErrorElement>;
            /**
             * Display an empty state with an illustration and a message.
             * Intended for use as `Page`'s `renderEmptyState`.
             */
            "l2-empty-state": LocalJSX.L2EmptyState & JSXBase.HTMLAttributes<HTMLL2EmptyStateElement>;
            /**
             * A site header for applications.
             */
            "l2-header": LocalJSX.L2Header & JSXBase.HTMLAttributes<HTMLL2HeaderElement>;
            /**
             * A dropdown for the header.
             */
            "l2-header-dropdown": LocalJSX.L2HeaderDropdown & JSXBase.HTMLAttributes<HTMLL2HeaderDropdownElement>;
            "l2-layout-auto-label": LocalJSX.L2LayoutAutoLabel & JSXBase.HTMLAttributes<HTMLL2LayoutAutoLabelElement>;
            /**
             * A button for the sidebar, sidebar-dropdown, and header-dropdown.
             */
            "l2-layout-button": LocalJSX.L2LayoutButton & JSXBase.HTMLAttributes<HTMLL2LayoutButtonElement>;
            /**
             * A horizontal rule
             */
            "l2-layout-hr": LocalJSX.L2LayoutHr & JSXBase.HTMLAttributes<HTMLL2LayoutHrElement>;
            /**
             * A link for the sidebar, sidebar-dropdown, and header-dropdown.
             */
            "l2-layout-link": LocalJSX.L2LayoutLink & JSXBase.HTMLAttributes<HTMLL2LayoutLinkElement>;
            /**
             * A section with an optional title for containing layout-links
             */
            "l2-layout-section": LocalJSX.L2LayoutSection & JSXBase.HTMLAttributes<HTMLL2LayoutSectionElement>;
            /**
             * An animated loading bar, with coloured states.
             * The bar can be externally controlled via the `setProgress` util.
             * Add a bar named `page` for automatic control from `Page`.
             */
            "l2-loading-bar": LocalJSX.L2LoadingBar & JSXBase.HTMLAttributes<HTMLL2LoadingBarElement>;
            /**
             * The Event Store logo.
             */
            "l2-logo": LocalJSX.L2Logo & JSXBase.HTMLAttributes<HTMLL2LogoElement>;
            /**
             * Constructs a navigation from a NavTree.
             */
            "l2-nav": LocalJSX.L2Nav & JSXBase.HTMLAttributes<HTMLL2NavElement>;
            "l2-nav-node-0": LocalJSX.L2NavNode0 & JSXBase.HTMLAttributes<HTMLL2NavNode0Element>;
            "l2-nav-node-1": LocalJSX.L2NavNode1 & JSXBase.HTMLAttributes<HTMLL2NavNode1Element>;
            "l2-nav-node-2": LocalJSX.L2NavNode2 & JSXBase.HTMLAttributes<HTMLL2NavNode2Element>;
            /**
             * Standard page title
             */
            "l2-page-title": LocalJSX.L2PageTitle & JSXBase.HTMLAttributes<HTMLL2PageTitleElement>;
            /**
             * A resizable panel. Automatically sets the relevant layout var based on it's size and when resized.
             */
            "l2-panel": LocalJSX.L2Panel & JSXBase.HTMLAttributes<HTMLL2PanelElement>;
            /**
             * A header for `l2-panel`.
             */
            "l2-panel-header": LocalJSX.L2PanelHeader & JSXBase.HTMLAttributes<HTMLL2PanelHeaderElement>;
            /**
             * A sidebar. Automatically sets `--layout-sidebar-width` based on it's own width.
             */
            "l2-sidebar": LocalJSX.L2Sidebar & JSXBase.HTMLAttributes<HTMLL2SidebarElement>;
            /**
             * A dropdown for the sidebar. Will automatically take the title and icon of the first active nested `l2-layout-link` or `l2-layout-button`.
             */
            "l2-sidebar-dropdown": LocalJSX.L2SidebarDropdown & JSXBase.HTMLAttributes<HTMLL2SidebarDropdownElement>;
            /**
             * A panel that takes the size of it's content.
             * Automatically sets the relevant layout var based on it's size.
             */
            "l2-sized-panel": LocalJSX.L2SizedPanel & JSXBase.HTMLAttributes<HTMLL2SizedPanelElement>;
            /**
             * A theme picker dropdown for the header
             */
            "l2-theme-dropdown": LocalJSX.L2ThemeDropdown & JSXBase.HTMLAttributes<HTMLL2ThemeDropdownElement>;
            "l2-theme-picker": LocalJSX.L2ThemePicker & JSXBase.HTMLAttributes<HTMLL2ThemePickerElement>;
            /**
             * Placed in the toolbar area of the layout. Automatically sets `--layout-toolbar-width` based on it's own width.
             */
            "l2-toolbar": LocalJSX.L2Toolbar & JSXBase.HTMLAttributes<HTMLL2ToolbarElement>;
        }
    }
}
