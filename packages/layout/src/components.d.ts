/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { backgroundVariant } from "./components/es-background/es-background";
import { Crumb } from "./components/es-breadcrumb/es-breadcrumb";
import { PageState } from "./components/es-page/es-page";
import { VNode } from "@stencil/core";
import { SidebarLinkVariant } from "./components/es-sidebar/components/es-sidebar-link/es-sidebar-link";
export namespace Components {
    interface EsBackground {
        /**
          * Sets the background variant.
         */
        "variant": backgroundVariant;
    }
    interface EsBreadcrumb {
        "crumbs": Crumb[];
    }
    interface EsFooter {
        "noSidebar"?: boolean;
    }
    interface EsHeader {
        "background": HTMLEsBackgroundElement['variant'] | 'none';
    }
    interface EsLogo {
        "height": number;
        "width": number;
    }
    interface EsPage {
        "crumbs"?: HTMLEsBreadcrumbElement['crumbs'];
        "empty": boolean;
        "headerRight"?: () => VNode | VNode[];
        "headerTitle"?: string | false;
        "noSidebar"?: boolean;
        "pageTitle": string;
        "renderEmptyState"?: () => VNode | VNode[];
        "state": PageState;
    }
    interface EsPageTitle {
    }
    interface EsSidebar {
    }
    interface EsSidebarLink {
        "disabled": boolean;
        "icon"?: string;
        "url"?: string;
        "urlMatch"?: string;
        "variant": SidebarLinkVariant;
    }
    interface EsSidebarSection {
        "sectionTitle": string;
    }
    interface EsSidebarTree {
        "icon"?: string;
        "name": string;
        "root": boolean;
        "url"?: string;
        "urlMatch"?: string;
    }
}
declare global {
    interface HTMLEsBackgroundElement extends Components.EsBackground, HTMLStencilElement {
    }
    var HTMLEsBackgroundElement: {
        prototype: HTMLEsBackgroundElement;
        new (): HTMLEsBackgroundElement;
    };
    interface HTMLEsBreadcrumbElement extends Components.EsBreadcrumb, HTMLStencilElement {
    }
    var HTMLEsBreadcrumbElement: {
        prototype: HTMLEsBreadcrumbElement;
        new (): HTMLEsBreadcrumbElement;
    };
    interface HTMLEsFooterElement extends Components.EsFooter, HTMLStencilElement {
    }
    var HTMLEsFooterElement: {
        prototype: HTMLEsFooterElement;
        new (): HTMLEsFooterElement;
    };
    interface HTMLEsHeaderElement extends Components.EsHeader, HTMLStencilElement {
    }
    var HTMLEsHeaderElement: {
        prototype: HTMLEsHeaderElement;
        new (): HTMLEsHeaderElement;
    };
    interface HTMLEsLogoElement extends Components.EsLogo, HTMLStencilElement {
    }
    var HTMLEsLogoElement: {
        prototype: HTMLEsLogoElement;
        new (): HTMLEsLogoElement;
    };
    interface HTMLEsPageElement extends Components.EsPage, HTMLStencilElement {
    }
    var HTMLEsPageElement: {
        prototype: HTMLEsPageElement;
        new (): HTMLEsPageElement;
    };
    interface HTMLEsPageTitleElement extends Components.EsPageTitle, HTMLStencilElement {
    }
    var HTMLEsPageTitleElement: {
        prototype: HTMLEsPageTitleElement;
        new (): HTMLEsPageTitleElement;
    };
    interface HTMLEsSidebarElement extends Components.EsSidebar, HTMLStencilElement {
    }
    var HTMLEsSidebarElement: {
        prototype: HTMLEsSidebarElement;
        new (): HTMLEsSidebarElement;
    };
    interface HTMLEsSidebarLinkElement extends Components.EsSidebarLink, HTMLStencilElement {
    }
    var HTMLEsSidebarLinkElement: {
        prototype: HTMLEsSidebarLinkElement;
        new (): HTMLEsSidebarLinkElement;
    };
    interface HTMLEsSidebarSectionElement extends Components.EsSidebarSection, HTMLStencilElement {
    }
    var HTMLEsSidebarSectionElement: {
        prototype: HTMLEsSidebarSectionElement;
        new (): HTMLEsSidebarSectionElement;
    };
    interface HTMLEsSidebarTreeElement extends Components.EsSidebarTree, HTMLStencilElement {
    }
    var HTMLEsSidebarTreeElement: {
        prototype: HTMLEsSidebarTreeElement;
        new (): HTMLEsSidebarTreeElement;
    };
    interface HTMLElementTagNameMap {
        "es-background": HTMLEsBackgroundElement;
        "es-breadcrumb": HTMLEsBreadcrumbElement;
        "es-footer": HTMLEsFooterElement;
        "es-header": HTMLEsHeaderElement;
        "es-logo": HTMLEsLogoElement;
        "es-page": HTMLEsPageElement;
        "es-page-title": HTMLEsPageTitleElement;
        "es-sidebar": HTMLEsSidebarElement;
        "es-sidebar-link": HTMLEsSidebarLinkElement;
        "es-sidebar-section": HTMLEsSidebarSectionElement;
        "es-sidebar-tree": HTMLEsSidebarTreeElement;
    }
}
declare namespace LocalJSX {
    interface EsBackground {
        /**
          * Sets the background variant.
         */
        "variant"?: backgroundVariant;
    }
    interface EsBreadcrumb {
        "crumbs"?: Crumb[];
    }
    interface EsFooter {
        "noSidebar"?: boolean;
    }
    interface EsHeader {
        "background"?: HTMLEsBackgroundElement['variant'] | 'none';
    }
    interface EsLogo {
        "height"?: number;
        "width"?: number;
    }
    interface EsPage {
        "crumbs"?: HTMLEsBreadcrumbElement['crumbs'];
        "empty"?: boolean;
        "headerRight"?: () => VNode | VNode[];
        "headerTitle"?: string | false;
        "noSidebar"?: boolean;
        "pageTitle": string;
        "renderEmptyState"?: () => VNode | VNode[];
        "state"?: PageState;
    }
    interface EsPageTitle {
    }
    interface EsSidebar {
    }
    interface EsSidebarLink {
        "disabled"?: boolean;
        "icon"?: string;
        "url"?: string;
        "urlMatch"?: string;
        "variant"?: SidebarLinkVariant;
    }
    interface EsSidebarSection {
        "sectionTitle": string;
    }
    interface EsSidebarTree {
        "icon"?: string;
        "name": string;
        "root"?: boolean;
        "url"?: string;
        "urlMatch"?: string;
    }
    interface IntrinsicElements {
        "es-background": EsBackground;
        "es-breadcrumb": EsBreadcrumb;
        "es-footer": EsFooter;
        "es-header": EsHeader;
        "es-logo": EsLogo;
        "es-page": EsPage;
        "es-page-title": EsPageTitle;
        "es-sidebar": EsSidebar;
        "es-sidebar-link": EsSidebarLink;
        "es-sidebar-section": EsSidebarSection;
        "es-sidebar-tree": EsSidebarTree;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "es-background": LocalJSX.EsBackground & JSXBase.HTMLAttributes<HTMLEsBackgroundElement>;
            "es-breadcrumb": LocalJSX.EsBreadcrumb & JSXBase.HTMLAttributes<HTMLEsBreadcrumbElement>;
            "es-footer": LocalJSX.EsFooter & JSXBase.HTMLAttributes<HTMLEsFooterElement>;
            "es-header": LocalJSX.EsHeader & JSXBase.HTMLAttributes<HTMLEsHeaderElement>;
            "es-logo": LocalJSX.EsLogo & JSXBase.HTMLAttributes<HTMLEsLogoElement>;
            "es-page": LocalJSX.EsPage & JSXBase.HTMLAttributes<HTMLEsPageElement>;
            "es-page-title": LocalJSX.EsPageTitle & JSXBase.HTMLAttributes<HTMLEsPageTitleElement>;
            "es-sidebar": LocalJSX.EsSidebar & JSXBase.HTMLAttributes<HTMLEsSidebarElement>;
            "es-sidebar-link": LocalJSX.EsSidebarLink & JSXBase.HTMLAttributes<HTMLEsSidebarLinkElement>;
            "es-sidebar-section": LocalJSX.EsSidebarSection & JSXBase.HTMLAttributes<HTMLEsSidebarSectionElement>;
            "es-sidebar-tree": LocalJSX.EsSidebarTree & JSXBase.HTMLAttributes<HTMLEsSidebarTreeElement>;
        }
    }
}
